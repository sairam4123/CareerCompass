import { useState } from "react";
import { NavBar } from "./components/NavBar";
import { First } from "./pages/First";
import Question from "./pages/Question";

import questions from "./datasets/questions.json";
import Result from "./pages/Result";
import { api } from "./lib/api";
import useMutation from "./lib/useMutation";
import { BasicAnswersType, QuestionType } from "./@types/Question";
import { ChoiceType } from "./@types/Choice";

type AppStateType = "BEGIN" | "QUESTIONNAIRE" | "AI_QUESTIONNAIRE" | "DONE";

function App() {
  const findAnswer = (question: number, choice: number) => {
    return (
      questions
        .find((q) => q.question === question + 1)
        ?.choices.find((c) => c.choice === choice)?.label ?? "No answer."
    );
  };
  const [choices, setChoices] = useState<number[]>([]);

  const answers = choices.map((choice, index) => {
    return findAnswer(index, choice);
  });

  const [appState, setAppState] = useState<AppStateType>("BEGIN");
  const [curQuestion, setCurQuestion] = useState<number>(0);
  const [question, setQuestion] = useState<QuestionType>(questions[0]);
  const [maxQuestions, setMaxQuestions] = useState<number>(questions.length);

  const [userId, setUserId] = useState<string>(""); // User ID for AI questionnaire

  const [aiAnswers, setAiAnswers] = useState<string[]>([]);
  const questionMutation = useMutation<
    { userId: string; question: QuestionType; max_questions: number },
    BasicAnswersType
  >({
    url: `${api}/answers`,
    method: "POST",
    onSuccess: ({ userId, question, max_questions }) => {
      setMaxQuestions(max_questions);
      setAppState("AI_QUESTIONNAIRE");
      setQuestion(question);
      setUserId(userId);
    },
  });

  const nextQuestionMutation = useMutation<
    { question: QuestionType },
    ChoiceType
  >({
    url: `${api}/answers/${userId}`,
    method: "POST",
    onSuccess: ({ question }) => {
      setQuestion(question);
    },
  });

  return (
    <>
      <NavBar />

      {appState === "BEGIN" && (
        <First onBegin={() => setAppState("QUESTIONNAIRE")} />
      )}
      {appState === "QUESTIONNAIRE" && (
        <Question
          isLoading={false}
          disablePrev={curQuestion === 0}
          disableNext={curQuestion === questions.length - 1}
          disableSubmit={curQuestion !== questions.length - 1}
          question={questions[curQuestion]}
          maxQuestions={questions.length}
          selectedAnswer={choices[curQuestion]}
          key={`question`}
          onAnswer={(answer) => {
            setChoices([
              ...choices.slice(0, curQuestion),
              answer,
              ...choices.slice(curQuestion + 1),
            ]);
            if (curQuestion === questions.length - 1) {
              setAppState("DONE");
              console.log(answers);
              questionMutation.mutate({
                age_group: answers[0],
                gender: answers[1],
                education: findAnswer(2, answer),
              });
              return;
            }
            setCurQuestion((prev) => prev + 1);
          }}
          onPrev={() => {
            setCurQuestion((prev) => prev - 1);
          }}
        ></Question>
      )}
      {appState === "DONE" && <Result userId={userId}></Result>}
      {appState === "AI_QUESTIONNAIRE" && (
        <Question
          disablePrev={true}
          isLoading={nextQuestionMutation.status === "LOADING"}
          maxQuestions={maxQuestions}
          question={question}
          selectedAnswer={-1}
          disableNext={question.question === maxQuestions}
          disableSubmit={question.question !== maxQuestions}
          note="Note: These questions are generated by AI and may not be accurate."
          onAnswer={(answer) => {
            setAiAnswers([
              ...aiAnswers,
              question.choices.find((c) => c.choice === answer)?.label ??
                "No answer.",
            ]);
            if (question.question === maxQuestions) {
              setAppState("DONE");
              return;
            }
            nextQuestionMutation.mutate({
              ...question.choices.find((c) => c.choice === answer)!,
            });
          }}
        />
      )}
    </>
  );
}

export default App;
