import { MdAutorenew, MdCancel, MdCheckCircle, MdFileCopy, MdShare } from "react-icons/md";
import Spinner from "../components/Spinner";
import { api } from "../lib/api";
import useFetch from "../lib/useFetch";
import CircularProgress from "../components/CircularProgress";
import { ResultType } from "../@types/Result";
import useWindowSize from "../lib/useWindowSize";
import { useNavigate, useParams } from "react-router";
import Button from "../components/Button";
import { Bounce, toast, ToastContainer } from "react-toastify";

export default function Result({ userId: defaultUserId }: { userId?: string | null }) {
  const { userId: paramUserId } = useParams();
  const navigate = useNavigate();
  const userId = defaultUserId ?? paramUserId;
  const { loading, error, data } = useFetch<{ results: ResultType[] }>(
    `${api}/result/${userId}`,
    { enabled: !!userId }
  );
  const bigInMiddle = (list: ResultType[]) => {
    return list.map((v) => ({ ...v }))
      .sort((a, b) => {
        return a.points - b.points;
      })
      .map((v, i, a) => {
        const p = ~~(a.length / 2);
        return i >= p ? a[a.length - i + p - 1] : v;
      })
      .reverse();
  };
  const { width: viewportWidth} = useWindowSize();

  return (
    <main className="p-4 flex flex-auto justify-center items-center min-h-screen pb-10 bg-gradient-to-br from-30% from-extra-light/25 via-extra-light to-light">
      <section
        className={`flex h-full flex-col justify-center items-center ${!userId ? "" : "mt-12"}`}
      >
        {userId && !loading && <h1 className="text-center font-bold text-6xl">Best Options</h1>}
        {error && <p className="text-red-500">{error.message}</p>}
        {(loading || !userId) && (
          <div className="flex flex-col animate-pulse items-center flex-1 mt-4 gap-2">
            <Spinner color="normal" size="large" />
            <p className="w-full md:w-1/2 lg:w-2/3 text-center">
              Our mascots are at work figuring your career for you!
            </p>
          </div>
        )}
        {data && userId && (
          <div className="grid sm:grid-cols-1 mt-8 md:grid-cols-2 lg:grid-cols-3 md:flex-row gap-2">
            {(viewportWidth > 1024 ? bigInMiddle(data.results) : data.results)?.map((result, index) => (
              <ResultSection
                key={index}
                result={result.result}
                description={result.description}
                points={result.points}
                advantages={result.advantages}
                disadvantages={result.disadvantages}
                match_description={result.match_description}
                tags={result.tags}
              />
            ))}
          </div>
        )}
        
        {data && userId && (<p className="text-center text-extra-dark mt-12">
            Note: These results are generated by AI and are not 100% accurate.<br></br>They are based on the questions you answered and just a suggestion.<br></br>
            Please consult with a career counselor for more accurate results.
        </p>)}
        {/* {data && userId && (<ResultsTable results={data.results} />)} */}
        {userId && (<div className={`${loading && "opacity-0"} flex-1 flex flex-row w-full transition-all items-center justify-center gap-8 mt-4`}>
          <Button icon={<MdAutorenew />} text="Start Over" onClick={() => navigate("/")} />
            <Button icon={<MdShare />} text="Share" onClick={() => {
              navigator.clipboard.writeText(`${window.location.origin}/result/${userId}`); 
              // alert user the link has been copied
            toast.success("Link copied to clipboard!", { position: "top-right" });
          }} />
          </div>)}
      </section>
      <ToastContainer
        position="top-right"
        autoClose={5000}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick={false}
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="light"
        transition={Bounce}
      />
    </main>
  );
}

function ResultSection({
  result,
  description,
  points,
  advantages,
  disadvantages,
  match_description,
  tags
}: {
  result: string;
  description: string;
  points: number;
  advantages: string[];
  disadvantages: string[];
  match_description: string;
  tags: string[]
}) {
  const copyToClipboard = () => {
    navigator.clipboard.writeText(JSON.stringify({ result, description, points, advantages, disadvantages, match_description }));
  }
  return (
    <section className="relative group grid mx-2 border bg-gradient-to-b from-white via-white to-zinc-50 hover:scale-105 transition-all shadow-lg rounded-md p-2 px-3 mt-4 gap-6">
        <div onClick={() => {copyToClipboard()}} className="absolute cursor-pointer group-hover:opacity-100 hover:bg-extra-light/50 justify-center items-center text-xs opacity-0 top-0 flex gap-1 transition-all flex-row right-0 p-2 bg-extra-light rounded-bl-md rounded-tr-md text-gray-800">
            <MdFileCopy size={14} /> Copy
        </div>
        <div className="justify-center flex items-center my-7">
      <CircularProgress
        percentage={points}
        backgroundColor="#f0f0f0"
        color="#3E7B27"
        size={150}
      />
        </div>
      <div className="flex flex-col gap-2">
        <h1 className="font-bold text-xl mb-1">{result}</h1>
        <p className="text-sm text-gray-600 italic">{match_description}</p>
      </div>
      <div>
        <h3 className="font-bold text-lg">Role Description</h3>
        <p className="text-sm text-gray-800">{description}</p>
      </div>
      <div className="">
        <h2 className="font-bold text-lg">Advantages</h2>
        <ul className="">
          {advantages.map((advantage, index) => (
            <li key={index} className="flex-row flex items-center gap-2">
              <MdCheckCircle color="green" />
              {advantage}
            </li>
          ))}
        </ul>
      </div>
      <div className="">
        <h2 className="font-bold text-lg ">Disadvantages</h2>
        <ul className="">
          {disadvantages.map((disadvantage, index) => (
            <li key={index} className="flex-row text-gray-800 flex items-center gap-2">
              <MdCancel color="red" />
              {disadvantage}
            </li>
          ))}
        </ul>
      </div>
      {tags ? <div className="flex flex-row gap-2 flex-wrap">
          {tags.map(tag => <p className="italic inline-flex text-sm text-gray-500 whitespace-nowrap" key={tag}>{tag.toLowerCase()}</p>)}
      </div> : <div><p className="italic text-sm text-gray-500">No tags found.</p></div>}
    </section>
  );
}
