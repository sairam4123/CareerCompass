# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template actions.py.jinja --
from typing import TypeVar
import warnings

from . import types, errors, bases
from ._compat import model_parse
from ._constants import CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED

if TYPE_CHECKING:
    from .client import Prisma
    from .bases import _PrismaModel


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class QuestionActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Question]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Question.prisma().query_raw(
            'SELECT * FROM Question WHERE id = $1',
            'bbadfchfja',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Question
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Question.prisma().query_first(
            'SELECT * FROM Question WHERE question = $1',
            377401575,
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.QuestionCreateInput,
        include: Optional[types.QuestionInclude] = None
    ) -> _PrismaModelT:
        """Create a new Question record.

        Parameters
        ----------
        data
            Question record data
        include
            Specifies which relations should be loaded on the returned Question model

        Returns
        -------
        prisma.models.Question
            The created Question record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Question record from just the required fields
        question = await Question.prisma().create(
            data={
                # data to create a Question record
                'question': 662824084,
                'title': 'bbehjachib',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.QuestionCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Question records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Question record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Question.prisma().create_many(
            data=[
                {
                    # data to create a Question record
                    'question': 2035015474,
                    'title': 'dgiiaaijj',
                },
                {
                    # data to create a Question record
                    'question': 1508029952,
                    'title': 'eigcfgbif',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.QuestionWhereUniqueInput,
        include: Optional[types.QuestionInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Question record.

        Parameters
        ----------
        where
            Question filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Question model

        Returns
        -------
        prisma.models.Question
            The deleted Question record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        question = await Question.prisma().delete(
            where={
                'id': 'bagcfbhiig',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.QuestionWhereUniqueInput,
        include: Optional[types.QuestionInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Question record.

        Parameters
        ----------
        where
            Question filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Question model

        Returns
        -------
        prisma.models.Question
            The found Question record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        question = await Question.prisma().find_unique(
            where={
                'id': 'cghideieh',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.QuestionWhereUniqueInput,
        include: Optional[types.QuestionInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Question record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Question filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Question model

        Returns
        -------
        prisma.models.Question
            The found Question record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        question = await Question.prisma().find_unique_or_raise(
            where={
                'id': 'biabhbdai',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.QuestionWhereInput] = None,
        cursor: Optional[types.QuestionWhereUniqueInput] = None,
        include: Optional[types.QuestionInclude] = None,
        order: Optional[Union[types.QuestionOrderByInput, List[types.QuestionOrderByInput]]] = None,
        distinct: Optional[List[types.QuestionScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Question records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Question records returned
        skip
            Ignore the first N results
        where
            Question filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Question model
        order
            Order the returned Question records by any field
        distinct
            Filter Question records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Question]
            The list of all Question records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Question records
        questions = await Question.prisma().find_many(take=10)

        # find the first 5 Question records ordered by the title field
        questions = await Question.prisma().find_many(
            take=5,
            order={
                'title': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.QuestionWhereInput] = None,
        cursor: Optional[types.QuestionWhereUniqueInput] = None,
        include: Optional[types.QuestionInclude] = None,
        order: Optional[Union[types.QuestionOrderByInput, List[types.QuestionOrderByInput]]] = None,
        distinct: Optional[List[types.QuestionScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Question record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Question filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Question model
        order
            Order the returned Question records by any field
        distinct
            Filter Question records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Question
            The first Question record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Question record ordered by the createdAt field
        question = await Question.prisma().find_first(
            skip=1,
            order={
                'createdAt': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.QuestionWhereInput] = None,
        cursor: Optional[types.QuestionWhereUniqueInput] = None,
        include: Optional[types.QuestionInclude] = None,
        order: Optional[Union[types.QuestionOrderByInput, List[types.QuestionOrderByInput]]] = None,
        distinct: Optional[List[types.QuestionScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Question record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Question filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Question model
        order
            Order the returned Question records by any field
        distinct
            Filter Question records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Question
            The first Question record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Question record ordered by the updatedAt field
        question = await Question.prisma().find_first_or_raise(
            skip=1,
            order={
                'updatedAt': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.QuestionUpdateInput,
        where: types.QuestionWhereUniqueInput,
        include: Optional[types.QuestionInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Question record.

        Parameters
        ----------
        data
            Question record data specifying what to update
        where
            Question filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Question model

        Returns
        -------
        prisma.models.Question
            The updated Question record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        question = await Question.prisma().update(
            where={
                'id': 'idghgaicb',
            },
            data={
                # data to update the Question record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.QuestionWhereUniqueInput,
        data: types.QuestionUpsertInput,
        include: Optional[types.QuestionInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Question filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Question model

        Returns
        -------
        prisma.models.Question
            The created or updated Question record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        question = await Question.prisma().upsert(
            where={
                'id': 'fjfddhigg',
            },
            data={
                'create': {
                    'id': 'fjfddhigg',
                    'question': 1508029952,
                    'title': 'eigcfgbif',
                },
                'update': {
                    'question': 1508029952,
                    'title': 'eigcfgbif',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.QuestionUpdateManyMutationInput,
        where: types.QuestionWhereInput,
    ) -> int:
        """Update multiple Question records

        Parameters
        ----------
        data
            Question data to update the selected Question records to
        where
            Filter to select the Question records to update

        Returns
        -------
        int
            The total number of Question records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Question records
        total = await Question.prisma().update_many(
            data={
                'id': 'hjaecfifb'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.QuestionWhereInput] = None,
        cursor: Optional[types.QuestionWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Question records present in the database

        Parameters
        ----------
        select
            Select the Question fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Question filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.QuestionCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Question.prisma().count()

        # results: prisma.types.QuestionCountAggregateOutput
        results = await Question.prisma().count(
            select={
                '_all': True,
                'question': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.QuestionCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.QuestionWhereInput] = None,
        cursor: Optional[types.QuestionWhereUniqueInput] = None,
    ) -> types.QuestionCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.QuestionCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.QuestionWhereInput] = None,
        cursor: Optional[types.QuestionWhereUniqueInput] = None,
    ) -> Union[int, types.QuestionCountAggregateOutput]:
        """Count the number of Question records present in the database

        Parameters
        ----------
        select
            Select the Question fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Question filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.QuestionCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Question.prisma().count()

        # results: prisma.types.QuestionCountAggregateOutput
        results = await Question.prisma().count(
            select={
                '_all': True,
                'title': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.QuestionCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.QuestionWhereInput] = None
    ) -> int:
        """Delete multiple Question records.

        Parameters
        ----------
        where
            Optional Question filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Question records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Question records
        total = await Question.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.QuestionScalarFieldKeys'],
        *,
        where: Optional['types.QuestionWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.QuestionAvgAggregateInput'] = None,
        sum: Optional['types.QuestionSumAggregateInput'] = None,
        min: Optional['types.QuestionMinAggregateInput'] = None,
        max: Optional['types.QuestionMaxAggregateInput'] = None,
        having: Optional['types.QuestionScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.QuestionCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.QuestionScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.QuestionScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.QuestionGroupByOutput']:
        """Group Question records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Question fields to group records by
        where
            Question filter to select records
        take
            Limit the maximum number of Question records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.QuestionGroupByOutput]
            A list of dictionaries representing the Question record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Question records by createdAt values
        # and count how many records are in each group
        results = await Question.prisma().group_by(
            ['createdAt'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class ChoiceActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Choice]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Choice.prisma().query_raw(
            'SELECT * FROM Choice WHERE id = $1',
            'cbbbjbfcii',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Choice
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Choice.prisma().query_first(
            'SELECT * FROM Choice WHERE choice = $1',
            1149758321,
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.ChoiceCreateInput,
        include: Optional[types.ChoiceInclude] = None
    ) -> _PrismaModelT:
        """Create a new Choice record.

        Parameters
        ----------
        data
            Choice record data
        include
            Specifies which relations should be loaded on the returned Choice model

        Returns
        -------
        prisma.models.Choice
            The created Choice record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Choice record from just the required fields
        choice = await Choice.prisma().create(
            data={
                # data to create a Choice record
                'choice': 1644289366,
                'label': 'bdiicjafbj',
                'questionId': 'bgehebiafc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.ChoiceCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Choice records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Choice record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Choice.prisma().create_many(
            data=[
                {
                    # data to create a Choice record
                    'choice': 1675546029,
                    'label': 'bhghchehcc',
                    'questionId': 'dcgchcbbf',
                },
                {
                    # data to create a Choice record
                    'choice': 1343201072,
                    'label': 'ghfhiafcb',
                    'questionId': 'heejgedji',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.ChoiceWhereUniqueInput,
        include: Optional[types.ChoiceInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Choice record.

        Parameters
        ----------
        where
            Choice filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Choice model

        Returns
        -------
        prisma.models.Choice
            The deleted Choice record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        choice = await Choice.prisma().delete(
            where={
                'id': 'bjgjgibgbf',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.ChoiceWhereUniqueInput,
        include: Optional[types.ChoiceInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Choice record.

        Parameters
        ----------
        where
            Choice filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Choice model

        Returns
        -------
        prisma.models.Choice
            The found Choice record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        choice = await Choice.prisma().find_unique(
            where={
                'id': 'bbbgbhfjge',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.ChoiceWhereUniqueInput,
        include: Optional[types.ChoiceInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Choice record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Choice filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Choice model

        Returns
        -------
        prisma.models.Choice
            The found Choice record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        choice = await Choice.prisma().find_unique_or_raise(
            where={
                'id': 'igbehcbab',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ChoiceWhereInput] = None,
        cursor: Optional[types.ChoiceWhereUniqueInput] = None,
        include: Optional[types.ChoiceInclude] = None,
        order: Optional[Union[types.ChoiceOrderByInput, List[types.ChoiceOrderByInput]]] = None,
        distinct: Optional[List[types.ChoiceScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Choice records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Choice records returned
        skip
            Ignore the first N results
        where
            Choice filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Choice model
        order
            Order the returned Choice records by any field
        distinct
            Filter Choice records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Choice]
            The list of all Choice records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Choice records
        choices = await Choice.prisma().find_many(take=10)

        # find the first 5 Choice records ordered by the label field
        choices = await Choice.prisma().find_many(
            take=5,
            order={
                'label': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ChoiceWhereInput] = None,
        cursor: Optional[types.ChoiceWhereUniqueInput] = None,
        include: Optional[types.ChoiceInclude] = None,
        order: Optional[Union[types.ChoiceOrderByInput, List[types.ChoiceOrderByInput]]] = None,
        distinct: Optional[List[types.ChoiceScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Choice record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Choice filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Choice model
        order
            Order the returned Choice records by any field
        distinct
            Filter Choice records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Choice
            The first Choice record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Choice record ordered by the questionId field
        choice = await Choice.prisma().find_first(
            skip=1,
            order={
                'questionId': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ChoiceWhereInput] = None,
        cursor: Optional[types.ChoiceWhereUniqueInput] = None,
        include: Optional[types.ChoiceInclude] = None,
        order: Optional[Union[types.ChoiceOrderByInput, List[types.ChoiceOrderByInput]]] = None,
        distinct: Optional[List[types.ChoiceScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Choice record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Choice filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Choice model
        order
            Order the returned Choice records by any field
        distinct
            Filter Choice records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Choice
            The first Choice record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Choice record ordered by the createdAt field
        choice = await Choice.prisma().find_first_or_raise(
            skip=1,
            order={
                'createdAt': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.ChoiceUpdateInput,
        where: types.ChoiceWhereUniqueInput,
        include: Optional[types.ChoiceInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Choice record.

        Parameters
        ----------
        data
            Choice record data specifying what to update
        where
            Choice filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Choice model

        Returns
        -------
        prisma.models.Choice
            The updated Choice record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        choice = await Choice.prisma().update(
            where={
                'id': 'bdadaadhag',
            },
            data={
                # data to update the Choice record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.ChoiceWhereUniqueInput,
        data: types.ChoiceUpsertInput,
        include: Optional[types.ChoiceInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Choice filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Choice model

        Returns
        -------
        prisma.models.Choice
            The created or updated Choice record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        choice = await Choice.prisma().upsert(
            where={
                'id': 'bgiggdidbf',
            },
            data={
                'create': {
                    'id': 'bgiggdidbf',
                    'choice': 1343201072,
                    'label': 'ghfhiafcb',
                    'questionId': 'heejgedji',
                },
                'update': {
                    'choice': 1343201072,
                    'label': 'ghfhiafcb',
                    'questionId': 'heejgedji',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.ChoiceUpdateManyMutationInput,
        where: types.ChoiceWhereInput,
    ) -> int:
        """Update multiple Choice records

        Parameters
        ----------
        data
            Choice data to update the selected Choice records to
        where
            Filter to select the Choice records to update

        Returns
        -------
        int
            The total number of Choice records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Choice records
        total = await Choice.prisma().update_many(
            data={
                'updatedAt': datetime.datetime.utcnow()
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ChoiceWhereInput] = None,
        cursor: Optional[types.ChoiceWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Choice records present in the database

        Parameters
        ----------
        select
            Select the Choice fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Choice filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ChoiceCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Choice.prisma().count()

        # results: prisma.types.ChoiceCountAggregateOutput
        results = await Choice.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.ChoiceCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ChoiceWhereInput] = None,
        cursor: Optional[types.ChoiceWhereUniqueInput] = None,
    ) -> types.ChoiceCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.ChoiceCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ChoiceWhereInput] = None,
        cursor: Optional[types.ChoiceWhereUniqueInput] = None,
    ) -> Union[int, types.ChoiceCountAggregateOutput]:
        """Count the number of Choice records present in the database

        Parameters
        ----------
        select
            Select the Choice fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Choice filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ChoiceCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Choice.prisma().count()

        # results: prisma.types.ChoiceCountAggregateOutput
        results = await Choice.prisma().count(
            select={
                '_all': True,
                'choice': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.ChoiceCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.ChoiceWhereInput] = None
    ) -> int:
        """Delete multiple Choice records.

        Parameters
        ----------
        where
            Optional Choice filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Choice records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Choice records
        total = await Choice.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.ChoiceScalarFieldKeys'],
        *,
        where: Optional['types.ChoiceWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.ChoiceAvgAggregateInput'] = None,
        sum: Optional['types.ChoiceSumAggregateInput'] = None,
        min: Optional['types.ChoiceMinAggregateInput'] = None,
        max: Optional['types.ChoiceMaxAggregateInput'] = None,
        having: Optional['types.ChoiceScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.ChoiceCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.ChoiceScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.ChoiceScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.ChoiceGroupByOutput']:
        """Group Choice records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Choice fields to group records by
        where
            Choice filter to select records
        take
            Limit the maximum number of Choice records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.ChoiceGroupByOutput]
            A list of dictionaries representing the Choice record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Choice records by label values
        # and count how many records are in each group
        results = await Choice.prisma().group_by(
            ['label'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class AnswerActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Answer]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Answer.prisma().query_raw(
            'SELECT * FROM Answer WHERE id = $1',
            'caaaedabfc',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Answer
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Answer.prisma().query_first(
            'SELECT * FROM Answer WHERE questionId = $1',
            'bigibebcib',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.AnswerCreateInput,
        include: Optional[types.AnswerInclude] = None
    ) -> _PrismaModelT:
        """Create a new Answer record.

        Parameters
        ----------
        data
            Answer record data
        include
            Specifies which relations should be loaded on the returned Answer model

        Returns
        -------
        prisma.models.Answer
            The created Answer record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Answer record from just the required fields
        answer = await Answer.prisma().create(
            data={
                # data to create a Answer record
                'questionId': 'bigaiehgcc',
                'choiceId': 'beeifcbebf',
                'profileId': 'bgcigfahea',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.AnswerCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Answer records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Answer record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Answer.prisma().create_many(
            data=[
                {
                    # data to create a Answer record
                    'questionId': 'bcejgaggif',
                    'choiceId': 'idfjadbcc',
                    'profileId': 'hgdhbjhhj',
                },
                {
                    # data to create a Answer record
                    'questionId': 'ecjjjfbae',
                    'choiceId': 'bhhfibbigf',
                    'profileId': 'ijdbeffgg',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.AnswerWhereUniqueInput,
        include: Optional[types.AnswerInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Answer record.

        Parameters
        ----------
        where
            Answer filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Answer model

        Returns
        -------
        prisma.models.Answer
            The deleted Answer record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        answer = await Answer.prisma().delete(
            where={
                'id': 'jjfeafhfj',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.AnswerWhereUniqueInput,
        include: Optional[types.AnswerInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Answer record.

        Parameters
        ----------
        where
            Answer filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Answer model

        Returns
        -------
        prisma.models.Answer
            The found Answer record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        answer = await Answer.prisma().find_unique(
            where={
                'id': 'cbachdgfce',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.AnswerWhereUniqueInput,
        include: Optional[types.AnswerInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Answer record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Answer filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Answer model

        Returns
        -------
        prisma.models.Answer
            The found Answer record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        answer = await Answer.prisma().find_unique_or_raise(
            where={
                'id': 'chbfcacbd',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AnswerWhereInput] = None,
        cursor: Optional[types.AnswerWhereUniqueInput] = None,
        include: Optional[types.AnswerInclude] = None,
        order: Optional[Union[types.AnswerOrderByInput, List[types.AnswerOrderByInput]]] = None,
        distinct: Optional[List[types.AnswerScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Answer records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Answer records returned
        skip
            Ignore the first N results
        where
            Answer filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Answer model
        order
            Order the returned Answer records by any field
        distinct
            Filter Answer records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Answer]
            The list of all Answer records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Answer records
        answers = await Answer.prisma().find_many(take=10)

        # find the first 5 Answer records ordered by the choiceId field
        answers = await Answer.prisma().find_many(
            take=5,
            order={
                'choiceId': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.AnswerWhereInput] = None,
        cursor: Optional[types.AnswerWhereUniqueInput] = None,
        include: Optional[types.AnswerInclude] = None,
        order: Optional[Union[types.AnswerOrderByInput, List[types.AnswerOrderByInput]]] = None,
        distinct: Optional[List[types.AnswerScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Answer record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Answer filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Answer model
        order
            Order the returned Answer records by any field
        distinct
            Filter Answer records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Answer
            The first Answer record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Answer record ordered by the profileId field
        answer = await Answer.prisma().find_first(
            skip=1,
            order={
                'profileId': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.AnswerWhereInput] = None,
        cursor: Optional[types.AnswerWhereUniqueInput] = None,
        include: Optional[types.AnswerInclude] = None,
        order: Optional[Union[types.AnswerOrderByInput, List[types.AnswerOrderByInput]]] = None,
        distinct: Optional[List[types.AnswerScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Answer record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Answer filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Answer model
        order
            Order the returned Answer records by any field
        distinct
            Filter Answer records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Answer
            The first Answer record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Answer record ordered by the createdAt field
        answer = await Answer.prisma().find_first_or_raise(
            skip=1,
            order={
                'createdAt': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.AnswerUpdateInput,
        where: types.AnswerWhereUniqueInput,
        include: Optional[types.AnswerInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Answer record.

        Parameters
        ----------
        data
            Answer record data specifying what to update
        where
            Answer filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Answer model

        Returns
        -------
        prisma.models.Answer
            The updated Answer record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        answer = await Answer.prisma().update(
            where={
                'id': 'efggddide',
            },
            data={
                # data to update the Answer record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.AnswerWhereUniqueInput,
        data: types.AnswerUpsertInput,
        include: Optional[types.AnswerInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Answer filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Answer model

        Returns
        -------
        prisma.models.Answer
            The created or updated Answer record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        answer = await Answer.prisma().upsert(
            where={
                'id': 'caficfigfb',
            },
            data={
                'create': {
                    'id': 'caficfigfb',
                    'questionId': 'ecjjjfbae',
                    'choiceId': 'bhhfibbigf',
                    'profileId': 'ijdbeffgg',
                },
                'update': {
                    'questionId': 'ecjjjfbae',
                    'choiceId': 'bhhfibbigf',
                    'profileId': 'ijdbeffgg',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.AnswerUpdateManyMutationInput,
        where: types.AnswerWhereInput,
    ) -> int:
        """Update multiple Answer records

        Parameters
        ----------
        data
            Answer data to update the selected Answer records to
        where
            Filter to select the Answer records to update

        Returns
        -------
        int
            The total number of Answer records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Answer records
        total = await Answer.prisma().update_many(
            data={
                'updatedAt': datetime.datetime.utcnow()
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AnswerWhereInput] = None,
        cursor: Optional[types.AnswerWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Answer records present in the database

        Parameters
        ----------
        select
            Select the Answer fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Answer filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.AnswerCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Answer.prisma().count()

        # results: prisma.types.AnswerCountAggregateOutput
        results = await Answer.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.AnswerCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AnswerWhereInput] = None,
        cursor: Optional[types.AnswerWhereUniqueInput] = None,
    ) -> types.AnswerCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.AnswerCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AnswerWhereInput] = None,
        cursor: Optional[types.AnswerWhereUniqueInput] = None,
    ) -> Union[int, types.AnswerCountAggregateOutput]:
        """Count the number of Answer records present in the database

        Parameters
        ----------
        select
            Select the Answer fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Answer filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.AnswerCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Answer.prisma().count()

        # results: prisma.types.AnswerCountAggregateOutput
        results = await Answer.prisma().count(
            select={
                '_all': True,
                'questionId': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.AnswerCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.AnswerWhereInput] = None
    ) -> int:
        """Delete multiple Answer records.

        Parameters
        ----------
        where
            Optional Answer filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Answer records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Answer records
        total = await Answer.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.AnswerScalarFieldKeys'],
        *,
        where: Optional['types.AnswerWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.AnswerAvgAggregateInput'] = None,
        sum: Optional['types.AnswerSumAggregateInput'] = None,
        min: Optional['types.AnswerMinAggregateInput'] = None,
        max: Optional['types.AnswerMaxAggregateInput'] = None,
        having: Optional['types.AnswerScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.AnswerCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.AnswerScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.AnswerScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.AnswerGroupByOutput']:
        """Group Answer records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Answer fields to group records by
        where
            Answer filter to select records
        take
            Limit the maximum number of Answer records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.AnswerGroupByOutput]
            A list of dictionaries representing the Answer record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Answer records by choiceId values
        # and count how many records are in each group
        results = await Answer.prisma().group_by(
            ['choiceId'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class ProfileActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Profile]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Profile.prisma().query_raw(
            'SELECT * FROM Profile WHERE userId = $1',
            'bfidgijfjc',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Profile
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Profile.prisma().query_first(
            'SELECT * FROM Profile WHERE ageGroup = $1',
            'ihieecagf',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.ProfileCreateInput,
        include: Optional[types.ProfileInclude] = None
    ) -> _PrismaModelT:
        """Create a new Profile record.

        Parameters
        ----------
        data
            Profile record data
        include
            Specifies which relations should be loaded on the returned Profile model

        Returns
        -------
        prisma.models.Profile
            The created Profile record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Profile record from just the required fields
        profile = await Profile.prisma().create(
            data={
                # data to create a Profile record
                'ageGroup': 'bghfciaafe',
                'education': 'bgchfhgceh',
                'gender': 'cafeiaccbc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.ProfileCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Profile records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Profile record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Profile.prisma().create_many(
            data=[
                {
                    # data to create a Profile record
                    'ageGroup': 'gaddfhfh',
                    'education': 'gieegcbeg',
                    'gender': 'bgcffadich',
                },
                {
                    # data to create a Profile record
                    'ageGroup': 'fcbichhci',
                    'education': 'bcggadccgf',
                    'gender': 'jdcfdcgc',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.ProfileWhereUniqueInput,
        include: Optional[types.ProfileInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Profile record.

        Parameters
        ----------
        where
            Profile filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Profile model

        Returns
        -------
        prisma.models.Profile
            The deleted Profile record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        profile = await Profile.prisma().delete(
            where={
                'userId': 'cafdaehjid',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.ProfileWhereUniqueInput,
        include: Optional[types.ProfileInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Profile record.

        Parameters
        ----------
        where
            Profile filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Profile model

        Returns
        -------
        prisma.models.Profile
            The found Profile record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        profile = await Profile.prisma().find_unique(
            where={
                'userId': 'gifdddbia',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.ProfileWhereUniqueInput,
        include: Optional[types.ProfileInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Profile record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Profile filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Profile model

        Returns
        -------
        prisma.models.Profile
            The found Profile record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        profile = await Profile.prisma().find_unique_or_raise(
            where={
                'userId': 'bchehecef',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ProfileWhereInput] = None,
        cursor: Optional[types.ProfileWhereUniqueInput] = None,
        include: Optional[types.ProfileInclude] = None,
        order: Optional[Union[types.ProfileOrderByInput, List[types.ProfileOrderByInput]]] = None,
        distinct: Optional[List[types.ProfileScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Profile records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Profile records returned
        skip
            Ignore the first N results
        where
            Profile filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Profile model
        order
            Order the returned Profile records by any field
        distinct
            Filter Profile records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Profile]
            The list of all Profile records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Profile records
        profiles = await Profile.prisma().find_many(take=10)

        # find the first 5 Profile records ordered by the education field
        profiles = await Profile.prisma().find_many(
            take=5,
            order={
                'education': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ProfileWhereInput] = None,
        cursor: Optional[types.ProfileWhereUniqueInput] = None,
        include: Optional[types.ProfileInclude] = None,
        order: Optional[Union[types.ProfileOrderByInput, List[types.ProfileOrderByInput]]] = None,
        distinct: Optional[List[types.ProfileScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Profile record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Profile filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Profile model
        order
            Order the returned Profile records by any field
        distinct
            Filter Profile records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Profile
            The first Profile record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Profile record ordered by the gender field
        profile = await Profile.prisma().find_first(
            skip=1,
            order={
                'gender': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ProfileWhereInput] = None,
        cursor: Optional[types.ProfileWhereUniqueInput] = None,
        include: Optional[types.ProfileInclude] = None,
        order: Optional[Union[types.ProfileOrderByInput, List[types.ProfileOrderByInput]]] = None,
        distinct: Optional[List[types.ProfileScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Profile record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Profile filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Profile model
        order
            Order the returned Profile records by any field
        distinct
            Filter Profile records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Profile
            The first Profile record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Profile record ordered by the createdAt field
        profile = await Profile.prisma().find_first_or_raise(
            skip=1,
            order={
                'createdAt': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.ProfileUpdateInput,
        where: types.ProfileWhereUniqueInput,
        include: Optional[types.ProfileInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Profile record.

        Parameters
        ----------
        data
            Profile record data specifying what to update
        where
            Profile filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Profile model

        Returns
        -------
        prisma.models.Profile
            The updated Profile record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        profile = await Profile.prisma().update(
            where={
                'userId': 'jeijcbhfe',
            },
            data={
                # data to update the Profile record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.ProfileWhereUniqueInput,
        data: types.ProfileUpsertInput,
        include: Optional[types.ProfileInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Profile filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Profile model

        Returns
        -------
        prisma.models.Profile
            The created or updated Profile record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        profile = await Profile.prisma().upsert(
            where={
                'userId': 'bjgejjabff',
            },
            data={
                'create': {
                    'userId': 'bjgejjabff',
                    'ageGroup': 'fcbichhci',
                    'education': 'bcggadccgf',
                    'gender': 'jdcfdcgc',
                },
                'update': {
                    'ageGroup': 'fcbichhci',
                    'education': 'bcggadccgf',
                    'gender': 'jdcfdcgc',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.ProfileUpdateManyMutationInput,
        where: types.ProfileWhereInput,
    ) -> int:
        """Update multiple Profile records

        Parameters
        ----------
        data
            Profile data to update the selected Profile records to
        where
            Filter to select the Profile records to update

        Returns
        -------
        int
            The total number of Profile records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Profile records
        total = await Profile.prisma().update_many(
            data={
                'updatedAt': datetime.datetime.utcnow()
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ProfileWhereInput] = None,
        cursor: Optional[types.ProfileWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Profile records present in the database

        Parameters
        ----------
        select
            Select the Profile fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Profile filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ProfileCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Profile.prisma().count()

        # results: prisma.types.ProfileCountAggregateOutput
        results = await Profile.prisma().count(
            select={
                '_all': True,
                'maxQuestion': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.ProfileCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ProfileWhereInput] = None,
        cursor: Optional[types.ProfileWhereUniqueInput] = None,
    ) -> types.ProfileCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.ProfileCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ProfileWhereInput] = None,
        cursor: Optional[types.ProfileWhereUniqueInput] = None,
    ) -> Union[int, types.ProfileCountAggregateOutput]:
        """Count the number of Profile records present in the database

        Parameters
        ----------
        select
            Select the Profile fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Profile filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ProfileCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Profile.prisma().count()

        # results: prisma.types.ProfileCountAggregateOutput
        results = await Profile.prisma().count(
            select={
                '_all': True,
                'userId': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.ProfileCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.ProfileWhereInput] = None
    ) -> int:
        """Delete multiple Profile records.

        Parameters
        ----------
        where
            Optional Profile filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Profile records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Profile records
        total = await Profile.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.ProfileScalarFieldKeys'],
        *,
        where: Optional['types.ProfileWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.ProfileAvgAggregateInput'] = None,
        sum: Optional['types.ProfileSumAggregateInput'] = None,
        min: Optional['types.ProfileMinAggregateInput'] = None,
        max: Optional['types.ProfileMaxAggregateInput'] = None,
        having: Optional['types.ProfileScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.ProfileCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.ProfileScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.ProfileScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.ProfileGroupByOutput']:
        """Group Profile records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Profile fields to group records by
        where
            Profile filter to select records
        take
            Limit the maximum number of Profile records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.ProfileGroupByOutput]
            A list of dictionaries representing the Profile record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Profile records by ageGroup values
        # and count how many records are in each group
        results = await Profile.prisma().group_by(
            ['ageGroup'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class ResultActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Result]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Result.prisma().query_raw(
            'SELECT * FROM Result WHERE id = $1',
            'bcciijbibg',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Result
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Result.prisma().query_first(
            'SELECT * FROM Result WHERE userId = $1',
            'cffcachfd',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.ResultCreateInput,
        include: Optional[types.ResultInclude] = None
    ) -> _PrismaModelT:
        """Create a new Result record.

        Parameters
        ----------
        data
            Result record data
        include
            Specifies which relations should be loaded on the returned Result model

        Returns
        -------
        prisma.models.Result
            The created Result record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Result record from just the required fields
        result = await Result.prisma().create(
            data={
                # data to create a Result record
                'userId': 'bccdfhdigc',
                'result': 'febcgjbfj',
                'points': 1064846676,
                'description': 'faidicegb',
                'match_description': 'bacecgfhbe',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.ResultCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Result records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Result record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Result.prisma().create_many(
            data=[
                {
                    # data to create a Result record
                    'userId': 'ihcahiead',
                    'result': 'biheheiajg',
                    'points': 916896761,
                    'description': 'hgjcghfbi',
                    'match_description': 'icadbcehj',
                },
                {
                    # data to create a Result record
                    'userId': 'jchciaee',
                    'result': 'deeificjd',
                    'points': 1121741130,
                    'description': 'bejfijgcfb',
                    'match_description': 'caifcbgii',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.ResultWhereUniqueInput,
        include: Optional[types.ResultInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Result record.

        Parameters
        ----------
        where
            Result filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Result model

        Returns
        -------
        prisma.models.Result
            The deleted Result record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        result = await Result.prisma().delete(
            where={
                'id': 'igaibbfgj',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.ResultWhereUniqueInput,
        include: Optional[types.ResultInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Result record.

        Parameters
        ----------
        where
            Result filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Result model

        Returns
        -------
        prisma.models.Result
            The found Result record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        result = await Result.prisma().find_unique(
            where={
                'id': 'bggajdcbbi',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.ResultWhereUniqueInput,
        include: Optional[types.ResultInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Result record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Result filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Result model

        Returns
        -------
        prisma.models.Result
            The found Result record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        result = await Result.prisma().find_unique_or_raise(
            where={
                'id': 'fcfhgbjed',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ResultWhereInput] = None,
        cursor: Optional[types.ResultWhereUniqueInput] = None,
        include: Optional[types.ResultInclude] = None,
        order: Optional[Union[types.ResultOrderByInput, List[types.ResultOrderByInput]]] = None,
        distinct: Optional[List[types.ResultScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Result records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Result records returned
        skip
            Ignore the first N results
        where
            Result filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Result model
        order
            Order the returned Result records by any field
        distinct
            Filter Result records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Result]
            The list of all Result records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Result records
        results = await Result.prisma().find_many(take=10)

        # find the first 5 Result records ordered by the result field
        results = await Result.prisma().find_many(
            take=5,
            order={
                'result': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ResultWhereInput] = None,
        cursor: Optional[types.ResultWhereUniqueInput] = None,
        include: Optional[types.ResultInclude] = None,
        order: Optional[Union[types.ResultOrderByInput, List[types.ResultOrderByInput]]] = None,
        distinct: Optional[List[types.ResultScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Result record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Result filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Result model
        order
            Order the returned Result records by any field
        distinct
            Filter Result records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Result
            The first Result record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Result record ordered by the points field
        result = await Result.prisma().find_first(
            skip=1,
            order={
                'points': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ResultWhereInput] = None,
        cursor: Optional[types.ResultWhereUniqueInput] = None,
        include: Optional[types.ResultInclude] = None,
        order: Optional[Union[types.ResultOrderByInput, List[types.ResultOrderByInput]]] = None,
        distinct: Optional[List[types.ResultScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Result record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Result filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Result model
        order
            Order the returned Result records by any field
        distinct
            Filter Result records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Result
            The first Result record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Result record ordered by the description field
        result = await Result.prisma().find_first_or_raise(
            skip=1,
            order={
                'description': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.ResultUpdateInput,
        where: types.ResultWhereUniqueInput,
        include: Optional[types.ResultInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Result record.

        Parameters
        ----------
        data
            Result record data specifying what to update
        where
            Result filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Result model

        Returns
        -------
        prisma.models.Result
            The updated Result record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        result = await Result.prisma().update(
            where={
                'id': 'hdgcajhjg',
            },
            data={
                # data to update the Result record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.ResultWhereUniqueInput,
        data: types.ResultUpsertInput,
        include: Optional[types.ResultInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Result filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Result model

        Returns
        -------
        prisma.models.Result
            The created or updated Result record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        result = await Result.prisma().upsert(
            where={
                'id': 'ejdjahicb',
            },
            data={
                'create': {
                    'id': 'ejdjahicb',
                    'userId': 'jchciaee',
                    'result': 'deeificjd',
                    'points': 1121741130,
                    'description': 'bejfijgcfb',
                    'match_description': 'caifcbgii',
                },
                'update': {
                    'userId': 'jchciaee',
                    'result': 'deeificjd',
                    'points': 1121741130,
                    'description': 'bejfijgcfb',
                    'match_description': 'caifcbgii',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.ResultUpdateManyMutationInput,
        where: types.ResultWhereInput,
    ) -> int:
        """Update multiple Result records

        Parameters
        ----------
        data
            Result data to update the selected Result records to
        where
            Filter to select the Result records to update

        Returns
        -------
        int
            The total number of Result records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Result records
        total = await Result.prisma().update_many(
            data={
                'match_description': 'gdjgigfgc'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ResultWhereInput] = None,
        cursor: Optional[types.ResultWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Result records present in the database

        Parameters
        ----------
        select
            Select the Result fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Result filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ResultCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Result.prisma().count()

        # results: prisma.types.ResultCountAggregateOutput
        results = await Result.prisma().count(
            select={
                '_all': True,
                'advantages': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.ResultCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ResultWhereInput] = None,
        cursor: Optional[types.ResultWhereUniqueInput] = None,
    ) -> types.ResultCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.ResultCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ResultWhereInput] = None,
        cursor: Optional[types.ResultWhereUniqueInput] = None,
    ) -> Union[int, types.ResultCountAggregateOutput]:
        """Count the number of Result records present in the database

        Parameters
        ----------
        select
            Select the Result fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Result filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ResultCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Result.prisma().count()

        # results: prisma.types.ResultCountAggregateOutput
        results = await Result.prisma().count(
            select={
                '_all': True,
                'disadvantages': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.ResultCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.ResultWhereInput] = None
    ) -> int:
        """Delete multiple Result records.

        Parameters
        ----------
        where
            Optional Result filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Result records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Result records
        total = await Result.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.ResultScalarFieldKeys'],
        *,
        where: Optional['types.ResultWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.ResultAvgAggregateInput'] = None,
        sum: Optional['types.ResultSumAggregateInput'] = None,
        min: Optional['types.ResultMinAggregateInput'] = None,
        max: Optional['types.ResultMaxAggregateInput'] = None,
        having: Optional['types.ResultScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.ResultCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.ResultScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.ResultScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.ResultGroupByOutput']:
        """Group Result records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Result fields to group records by
        where
            Result filter to select records
        take
            Limit the maximum number of Result records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.ResultGroupByOutput]
            A list of dictionaries representing the Result record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Result records by tags values
        # and count how many records are in each group
        results = await Result.prisma().group_by(
            ['tags'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models