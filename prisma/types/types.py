# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# Question types

class QuestionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Question create method"""
    id: _str
    choices: 'ChoiceCreateManyNestedWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    answers: 'AnswerCreateManyNestedWithoutRelationsInput'


class QuestionCreateInput(QuestionOptionalCreateInput):
    """Required arguments to the Question create method"""
    question: _int
    title: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class QuestionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Question create method, without relations"""
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class QuestionCreateWithoutRelationsInput(QuestionOptionalCreateWithoutRelationsInput):
    """Required arguments to the Question create method, without relations"""
    question: _int
    title: _str

class QuestionConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'QuestionCreateWithoutRelationsInput'
    where: 'QuestionWhereUniqueInput'

class QuestionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'QuestionCreateWithoutRelationsInput'
    connect: 'QuestionWhereUniqueInput'
    connect_or_create: 'QuestionConnectOrCreateWithoutRelationsInput'


class QuestionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['QuestionCreateWithoutRelationsInput', List['QuestionCreateWithoutRelationsInput']]
    connect: Union['QuestionWhereUniqueInput', List['QuestionWhereUniqueInput']]
    connect_or_create: Union['QuestionConnectOrCreateWithoutRelationsInput', List['QuestionConnectOrCreateWithoutRelationsInput']]

_QuestionWhereUnique_id_Input = TypedDict(
    '_QuestionWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

QuestionWhereUniqueInput = _QuestionWhereUnique_id_Input


class QuestionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    question: Union[AtomicIntInput, _int]
    title: _str
    choices: 'ChoiceUpdateManyWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    answers: 'AnswerUpdateManyWithoutRelationsInput'


class QuestionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    question: Union[AtomicIntInput, _int]
    title: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class QuestionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['QuestionCreateWithoutRelationsInput']
    connect: List['QuestionWhereUniqueInput']
    connect_or_create: List['QuestionConnectOrCreateWithoutRelationsInput']
    set: List['QuestionWhereUniqueInput']
    disconnect: List['QuestionWhereUniqueInput']
    delete: List['QuestionWhereUniqueInput']

    # TODO
    # update: List['QuestionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['QuestionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['QuestionScalarWhereInput']
    # upsert: List['QuestionUpserteWithWhereUniqueWithoutRelationsInput']


class QuestionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'QuestionCreateWithoutRelationsInput'
    connect: 'QuestionWhereUniqueInput'
    connect_or_create: 'QuestionConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'QuestionUpdateInput'
    # upsert: 'QuestionUpsertWithoutRelationsInput'


class QuestionUpsertInput(TypedDict):
    create: 'QuestionCreateInput'
    update: 'QuestionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Question_id_OrderByInput = TypedDict(
    '_Question_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Question_question_OrderByInput = TypedDict(
    '_Question_question_OrderByInput',
    {
        'question': 'SortOrder',
    },
    total=True
)

_Question_title_OrderByInput = TypedDict(
    '_Question_title_OrderByInput',
    {
        'title': 'SortOrder',
    },
    total=True
)

_Question_createdAt_OrderByInput = TypedDict(
    '_Question_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Question_updatedAt_OrderByInput = TypedDict(
    '_Question_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Question_RelevanceInner = TypedDict(
    '_Question_RelevanceInner',
    {
        'fields': 'List[QuestionScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Question_RelevanceOrderByInput = TypedDict(
    '_Question_RelevanceOrderByInput',
    {
        '_relevance': '_Question_RelevanceInner',
    },
    total=True
)

QuestionOrderByInput = Union[
    '_Question_id_OrderByInput',
    '_Question_question_OrderByInput',
    '_Question_title_OrderByInput',
    '_Question_createdAt_OrderByInput',
    '_Question_updatedAt_OrderByInput',
    '_Question_RelevanceOrderByInput',
]



# recursive Question types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

QuestionRelationFilter = TypedDict(
    'QuestionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class QuestionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class QuestionInclude(TypedDict, total=False):
    """Question relational arguments"""
    choices: Union[bool, 'FindManyChoiceArgsFromQuestion']
    answers: Union[bool, 'FindManyAnswerArgsFromQuestion']


    

class QuestionIncludeFromQuestion(TypedDict, total=False):
    """Relational arguments for Question"""
    choices: Union[bool, 'FindManyChoiceArgsFromQuestionRecursive1']
    answers: Union[bool, 'FindManyAnswerArgsFromQuestionRecursive1']


class QuestionIncludeFromQuestionRecursive1(TypedDict, total=False):
    """Relational arguments for Question"""
    choices: Union[bool, 'FindManyChoiceArgsFromQuestionRecursive2']
    answers: Union[bool, 'FindManyAnswerArgsFromQuestionRecursive2']


class QuestionIncludeFromQuestionRecursive2(TypedDict, total=False):
    """Relational arguments for Question"""
    choices: Union[bool, 'FindManyChoiceArgsFromQuestionRecursive3']
    answers: Union[bool, 'FindManyAnswerArgsFromQuestionRecursive3']


class QuestionIncludeFromQuestionRecursive3(TypedDict, total=False):
    """Relational arguments for Question"""
    choices: Union[bool, 'FindManyChoiceArgsFromQuestionRecursive4']
    answers: Union[bool, 'FindManyAnswerArgsFromQuestionRecursive4']


class QuestionIncludeFromQuestionRecursive4(TypedDict, total=False):
    """Relational arguments for Question"""

    

class QuestionArgsFromQuestion(TypedDict, total=False):
    """Arguments for Question"""
    include: 'QuestionIncludeFromQuestionRecursive1'


class QuestionArgsFromQuestionRecursive1(TypedDict, total=False):
    """Arguments for Question"""
    include: 'QuestionIncludeFromQuestionRecursive2'


class QuestionArgsFromQuestionRecursive2(TypedDict, total=False):
    """Arguments for Question"""
    include: 'QuestionIncludeFromQuestionRecursive3'


class QuestionArgsFromQuestionRecursive3(TypedDict, total=False):
    """Arguments for Question"""
    include: 'QuestionIncludeFromQuestionRecursive4'


class QuestionArgsFromQuestionRecursive4(TypedDict, total=False):
    """Arguments for Question"""
    
    

class FindManyQuestionArgsFromQuestion(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive1'


class FindManyQuestionArgsFromQuestionRecursive1(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive2'


class FindManyQuestionArgsFromQuestionRecursive2(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive3'


class FindManyQuestionArgsFromQuestionRecursive3(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive4'


class FindManyQuestionArgsFromQuestionRecursive4(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    
    

class ChoiceIncludeFromQuestion(TypedDict, total=False):
    """Relational arguments for Question"""
    question: Union[bool, 'QuestionArgsFromQuestionRecursive1']
    pickedAnswers: Union[bool, 'FindManyAnswerArgsFromQuestionRecursive1']


class ChoiceIncludeFromQuestionRecursive1(TypedDict, total=False):
    """Relational arguments for Question"""
    question: Union[bool, 'QuestionArgsFromQuestionRecursive2']
    pickedAnswers: Union[bool, 'FindManyAnswerArgsFromQuestionRecursive2']


class ChoiceIncludeFromQuestionRecursive2(TypedDict, total=False):
    """Relational arguments for Question"""
    question: Union[bool, 'QuestionArgsFromQuestionRecursive3']
    pickedAnswers: Union[bool, 'FindManyAnswerArgsFromQuestionRecursive3']


class ChoiceIncludeFromQuestionRecursive3(TypedDict, total=False):
    """Relational arguments for Question"""
    question: Union[bool, 'QuestionArgsFromQuestionRecursive4']
    pickedAnswers: Union[bool, 'FindManyAnswerArgsFromQuestionRecursive4']


class ChoiceIncludeFromQuestionRecursive4(TypedDict, total=False):
    """Relational arguments for Question"""

    

class ChoiceArgsFromQuestion(TypedDict, total=False):
    """Arguments for Question"""
    include: 'ChoiceIncludeFromChoiceRecursive1'


class ChoiceArgsFromQuestionRecursive1(TypedDict, total=False):
    """Arguments for Question"""
    include: 'ChoiceIncludeFromChoiceRecursive2'


class ChoiceArgsFromQuestionRecursive2(TypedDict, total=False):
    """Arguments for Question"""
    include: 'ChoiceIncludeFromChoiceRecursive3'


class ChoiceArgsFromQuestionRecursive3(TypedDict, total=False):
    """Arguments for Question"""
    include: 'ChoiceIncludeFromChoiceRecursive4'


class ChoiceArgsFromQuestionRecursive4(TypedDict, total=False):
    """Arguments for Question"""
    
    

class FindManyChoiceArgsFromQuestion(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['ChoiceOrderByInput', List['ChoiceOrderByInput']]
    where: 'ChoiceWhereInput'
    cursor: 'ChoiceWhereUniqueInput'
    distinct: List['ChoiceScalarFieldKeys']
    include: 'ChoiceIncludeFromChoiceRecursive1'


class FindManyChoiceArgsFromQuestionRecursive1(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['ChoiceOrderByInput', List['ChoiceOrderByInput']]
    where: 'ChoiceWhereInput'
    cursor: 'ChoiceWhereUniqueInput'
    distinct: List['ChoiceScalarFieldKeys']
    include: 'ChoiceIncludeFromChoiceRecursive2'


class FindManyChoiceArgsFromQuestionRecursive2(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['ChoiceOrderByInput', List['ChoiceOrderByInput']]
    where: 'ChoiceWhereInput'
    cursor: 'ChoiceWhereUniqueInput'
    distinct: List['ChoiceScalarFieldKeys']
    include: 'ChoiceIncludeFromChoiceRecursive3'


class FindManyChoiceArgsFromQuestionRecursive3(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['ChoiceOrderByInput', List['ChoiceOrderByInput']]
    where: 'ChoiceWhereInput'
    cursor: 'ChoiceWhereUniqueInput'
    distinct: List['ChoiceScalarFieldKeys']
    include: 'ChoiceIncludeFromChoiceRecursive4'


class FindManyChoiceArgsFromQuestionRecursive4(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['ChoiceOrderByInput', List['ChoiceOrderByInput']]
    where: 'ChoiceWhereInput'
    cursor: 'ChoiceWhereUniqueInput'
    distinct: List['ChoiceScalarFieldKeys']
    
    

class AnswerIncludeFromQuestion(TypedDict, total=False):
    """Relational arguments for Question"""
    question: Union[bool, 'QuestionArgsFromQuestionRecursive1']
    choice: Union[bool, 'ChoiceArgsFromQuestionRecursive1']
    profile: Union[bool, 'ProfileArgsFromQuestionRecursive1']


class AnswerIncludeFromQuestionRecursive1(TypedDict, total=False):
    """Relational arguments for Question"""
    question: Union[bool, 'QuestionArgsFromQuestionRecursive2']
    choice: Union[bool, 'ChoiceArgsFromQuestionRecursive2']
    profile: Union[bool, 'ProfileArgsFromQuestionRecursive2']


class AnswerIncludeFromQuestionRecursive2(TypedDict, total=False):
    """Relational arguments for Question"""
    question: Union[bool, 'QuestionArgsFromQuestionRecursive3']
    choice: Union[bool, 'ChoiceArgsFromQuestionRecursive3']
    profile: Union[bool, 'ProfileArgsFromQuestionRecursive3']


class AnswerIncludeFromQuestionRecursive3(TypedDict, total=False):
    """Relational arguments for Question"""
    question: Union[bool, 'QuestionArgsFromQuestionRecursive4']
    choice: Union[bool, 'ChoiceArgsFromQuestionRecursive4']
    profile: Union[bool, 'ProfileArgsFromQuestionRecursive4']


class AnswerIncludeFromQuestionRecursive4(TypedDict, total=False):
    """Relational arguments for Question"""

    

class AnswerArgsFromQuestion(TypedDict, total=False):
    """Arguments for Question"""
    include: 'AnswerIncludeFromAnswerRecursive1'


class AnswerArgsFromQuestionRecursive1(TypedDict, total=False):
    """Arguments for Question"""
    include: 'AnswerIncludeFromAnswerRecursive2'


class AnswerArgsFromQuestionRecursive2(TypedDict, total=False):
    """Arguments for Question"""
    include: 'AnswerIncludeFromAnswerRecursive3'


class AnswerArgsFromQuestionRecursive3(TypedDict, total=False):
    """Arguments for Question"""
    include: 'AnswerIncludeFromAnswerRecursive4'


class AnswerArgsFromQuestionRecursive4(TypedDict, total=False):
    """Arguments for Question"""
    
    

class FindManyAnswerArgsFromQuestion(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    include: 'AnswerIncludeFromAnswerRecursive1'


class FindManyAnswerArgsFromQuestionRecursive1(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    include: 'AnswerIncludeFromAnswerRecursive2'


class FindManyAnswerArgsFromQuestionRecursive2(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    include: 'AnswerIncludeFromAnswerRecursive3'


class FindManyAnswerArgsFromQuestionRecursive3(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    include: 'AnswerIncludeFromAnswerRecursive4'


class FindManyAnswerArgsFromQuestionRecursive4(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    
    

class ProfileIncludeFromQuestion(TypedDict, total=False):
    """Relational arguments for Question"""
    answers: Union[bool, 'FindManyAnswerArgsFromQuestionRecursive1']
    results: Union[bool, 'FindManyResultArgsFromQuestionRecursive1']


class ProfileIncludeFromQuestionRecursive1(TypedDict, total=False):
    """Relational arguments for Question"""
    answers: Union[bool, 'FindManyAnswerArgsFromQuestionRecursive2']
    results: Union[bool, 'FindManyResultArgsFromQuestionRecursive2']


class ProfileIncludeFromQuestionRecursive2(TypedDict, total=False):
    """Relational arguments for Question"""
    answers: Union[bool, 'FindManyAnswerArgsFromQuestionRecursive3']
    results: Union[bool, 'FindManyResultArgsFromQuestionRecursive3']


class ProfileIncludeFromQuestionRecursive3(TypedDict, total=False):
    """Relational arguments for Question"""
    answers: Union[bool, 'FindManyAnswerArgsFromQuestionRecursive4']
    results: Union[bool, 'FindManyResultArgsFromQuestionRecursive4']


class ProfileIncludeFromQuestionRecursive4(TypedDict, total=False):
    """Relational arguments for Question"""

    

class ProfileArgsFromQuestion(TypedDict, total=False):
    """Arguments for Question"""
    include: 'ProfileIncludeFromProfileRecursive1'


class ProfileArgsFromQuestionRecursive1(TypedDict, total=False):
    """Arguments for Question"""
    include: 'ProfileIncludeFromProfileRecursive2'


class ProfileArgsFromQuestionRecursive2(TypedDict, total=False):
    """Arguments for Question"""
    include: 'ProfileIncludeFromProfileRecursive3'


class ProfileArgsFromQuestionRecursive3(TypedDict, total=False):
    """Arguments for Question"""
    include: 'ProfileIncludeFromProfileRecursive4'


class ProfileArgsFromQuestionRecursive4(TypedDict, total=False):
    """Arguments for Question"""
    
    

class FindManyProfileArgsFromQuestion(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive1'


class FindManyProfileArgsFromQuestionRecursive1(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive2'


class FindManyProfileArgsFromQuestionRecursive2(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive3'


class FindManyProfileArgsFromQuestionRecursive3(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive4'


class FindManyProfileArgsFromQuestionRecursive4(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    
    

class ResultIncludeFromQuestion(TypedDict, total=False):
    """Relational arguments for Question"""
    profile: Union[bool, 'ProfileArgsFromQuestionRecursive1']


class ResultIncludeFromQuestionRecursive1(TypedDict, total=False):
    """Relational arguments for Question"""
    profile: Union[bool, 'ProfileArgsFromQuestionRecursive2']


class ResultIncludeFromQuestionRecursive2(TypedDict, total=False):
    """Relational arguments for Question"""
    profile: Union[bool, 'ProfileArgsFromQuestionRecursive3']


class ResultIncludeFromQuestionRecursive3(TypedDict, total=False):
    """Relational arguments for Question"""
    profile: Union[bool, 'ProfileArgsFromQuestionRecursive4']


class ResultIncludeFromQuestionRecursive4(TypedDict, total=False):
    """Relational arguments for Question"""

    

class ResultArgsFromQuestion(TypedDict, total=False):
    """Arguments for Question"""
    include: 'ResultIncludeFromResultRecursive1'


class ResultArgsFromQuestionRecursive1(TypedDict, total=False):
    """Arguments for Question"""
    include: 'ResultIncludeFromResultRecursive2'


class ResultArgsFromQuestionRecursive2(TypedDict, total=False):
    """Arguments for Question"""
    include: 'ResultIncludeFromResultRecursive3'


class ResultArgsFromQuestionRecursive3(TypedDict, total=False):
    """Arguments for Question"""
    include: 'ResultIncludeFromResultRecursive4'


class ResultArgsFromQuestionRecursive4(TypedDict, total=False):
    """Arguments for Question"""
    
    

class FindManyResultArgsFromQuestion(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['ResultOrderByInput', List['ResultOrderByInput']]
    where: 'ResultWhereInput'
    cursor: 'ResultWhereUniqueInput'
    distinct: List['ResultScalarFieldKeys']
    include: 'ResultIncludeFromResultRecursive1'


class FindManyResultArgsFromQuestionRecursive1(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['ResultOrderByInput', List['ResultOrderByInput']]
    where: 'ResultWhereInput'
    cursor: 'ResultWhereUniqueInput'
    distinct: List['ResultScalarFieldKeys']
    include: 'ResultIncludeFromResultRecursive2'


class FindManyResultArgsFromQuestionRecursive2(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['ResultOrderByInput', List['ResultOrderByInput']]
    where: 'ResultWhereInput'
    cursor: 'ResultWhereUniqueInput'
    distinct: List['ResultScalarFieldKeys']
    include: 'ResultIncludeFromResultRecursive3'


class FindManyResultArgsFromQuestionRecursive3(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['ResultOrderByInput', List['ResultOrderByInput']]
    where: 'ResultWhereInput'
    cursor: 'ResultWhereUniqueInput'
    distinct: List['ResultScalarFieldKeys']
    include: 'ResultIncludeFromResultRecursive4'


class FindManyResultArgsFromQuestionRecursive4(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['ResultOrderByInput', List['ResultOrderByInput']]
    where: 'ResultWhereInput'
    cursor: 'ResultWhereUniqueInput'
    distinct: List['ResultScalarFieldKeys']
    


FindManyQuestionArgs = FindManyQuestionArgsFromQuestion
FindFirstQuestionArgs = FindManyQuestionArgsFromQuestion


    

class QuestionWhereInput(TypedDict, total=False):
    """Question arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    question: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    choices: 'ChoiceListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    answers: 'AnswerListRelationFilter'

    # should be noted that AND and NOT should be Union['QuestionWhereInputRecursive1', List['QuestionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['QuestionWhereInputRecursive1']
    OR: List['QuestionWhereInputRecursive1']
    NOT: List['QuestionWhereInputRecursive1']


class QuestionWhereInputRecursive1(TypedDict, total=False):
    """Question arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    question: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    choices: 'ChoiceListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    answers: 'AnswerListRelationFilter'

    # should be noted that AND and NOT should be Union['QuestionWhereInputRecursive2', List['QuestionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['QuestionWhereInputRecursive2']
    OR: List['QuestionWhereInputRecursive2']
    NOT: List['QuestionWhereInputRecursive2']


class QuestionWhereInputRecursive2(TypedDict, total=False):
    """Question arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    question: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    choices: 'ChoiceListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    answers: 'AnswerListRelationFilter'

    # should be noted that AND and NOT should be Union['QuestionWhereInputRecursive3', List['QuestionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['QuestionWhereInputRecursive3']
    OR: List['QuestionWhereInputRecursive3']
    NOT: List['QuestionWhereInputRecursive3']


class QuestionWhereInputRecursive3(TypedDict, total=False):
    """Question arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    question: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    choices: 'ChoiceListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    answers: 'AnswerListRelationFilter'

    # should be noted that AND and NOT should be Union['QuestionWhereInputRecursive4', List['QuestionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['QuestionWhereInputRecursive4']
    OR: List['QuestionWhereInputRecursive4']
    NOT: List['QuestionWhereInputRecursive4']


class QuestionWhereInputRecursive4(TypedDict, total=False):
    """Question arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    question: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    choices: 'ChoiceListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    answers: 'AnswerListRelationFilter'



# aggregate Question types


    

class QuestionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Question arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    question: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['QuestionScalarWhereWithAggregatesInputRecursive1']
    OR: List['QuestionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['QuestionScalarWhereWithAggregatesInputRecursive1']


class QuestionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Question arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    question: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['QuestionScalarWhereWithAggregatesInputRecursive2']
    OR: List['QuestionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['QuestionScalarWhereWithAggregatesInputRecursive2']


class QuestionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Question arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    question: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['QuestionScalarWhereWithAggregatesInputRecursive3']
    OR: List['QuestionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['QuestionScalarWhereWithAggregatesInputRecursive3']


class QuestionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Question arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    question: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['QuestionScalarWhereWithAggregatesInputRecursive4']
    OR: List['QuestionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['QuestionScalarWhereWithAggregatesInputRecursive4']


class QuestionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Question arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    question: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class QuestionGroupByOutput(TypedDict, total=False):
    id: _str
    question: _int
    title: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'QuestionSumAggregateOutput'
    _avg: 'QuestionAvgAggregateOutput'
    _min: 'QuestionMinAggregateOutput'
    _max: 'QuestionMaxAggregateOutput'
    _count: 'QuestionCountAggregateOutput'


class QuestionAvgAggregateOutput(TypedDict, total=False):
    """Question output for aggregating averages"""
    question: float


class QuestionSumAggregateOutput(TypedDict, total=False):
    """Question output for aggregating sums"""
    question: _int


class QuestionScalarAggregateOutput(TypedDict, total=False):
    """Question output including scalar fields"""
    id: _str
    question: _int
    title: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


QuestionMinAggregateOutput = QuestionScalarAggregateOutput
QuestionMaxAggregateOutput = QuestionScalarAggregateOutput


class QuestionMaxAggregateInput(TypedDict, total=False):
    """Question input for aggregating by max"""
    id: bool
    question: bool
    title: bool
    createdAt: bool
    updatedAt: bool


class QuestionMinAggregateInput(TypedDict, total=False):
    """Question input for aggregating by min"""
    id: bool
    question: bool
    title: bool
    createdAt: bool
    updatedAt: bool


class QuestionNumberAggregateInput(TypedDict, total=False):
    """Question input for aggregating numbers"""
    question: bool


QuestionAvgAggregateInput = QuestionNumberAggregateInput
QuestionSumAggregateInput = QuestionNumberAggregateInput


QuestionCountAggregateInput = TypedDict(
    'QuestionCountAggregateInput',
    {
        'id': bool,
        'question': bool,
        'title': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

QuestionCountAggregateOutput = TypedDict(
    'QuestionCountAggregateOutput',
    {
        'id': int,
        'question': int,
        'title': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


QuestionKeys = Literal[
    'id',
    'question',
    'title',
    'choices',
    'createdAt',
    'updatedAt',
    'answers',
]
QuestionScalarFieldKeys = Literal[
    'id',
    'question',
    'title',
    'createdAt',
    'updatedAt',
]
QuestionScalarFieldKeysT = TypeVar('QuestionScalarFieldKeysT', bound=QuestionScalarFieldKeys)

QuestionRelationalFieldKeys = Literal[
        'choices',
        'answers',
    ]

# Choice types

class ChoiceOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Choice create method"""
    id: _str
    questionId: _str
    question: 'QuestionCreateNestedWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    pickedAnswers: 'AnswerCreateManyNestedWithoutRelationsInput'


class ChoiceCreateInput(ChoiceOptionalCreateInput):
    """Required arguments to the Choice create method"""
    choice: _int
    label: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ChoiceOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Choice create method, without relations"""
    id: _str
    questionId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ChoiceCreateWithoutRelationsInput(ChoiceOptionalCreateWithoutRelationsInput):
    """Required arguments to the Choice create method, without relations"""
    choice: _int
    label: _str

class ChoiceConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ChoiceCreateWithoutRelationsInput'
    where: 'ChoiceWhereUniqueInput'

class ChoiceCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ChoiceCreateWithoutRelationsInput'
    connect: 'ChoiceWhereUniqueInput'
    connect_or_create: 'ChoiceConnectOrCreateWithoutRelationsInput'


class ChoiceCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ChoiceCreateWithoutRelationsInput', List['ChoiceCreateWithoutRelationsInput']]
    connect: Union['ChoiceWhereUniqueInput', List['ChoiceWhereUniqueInput']]
    connect_or_create: Union['ChoiceConnectOrCreateWithoutRelationsInput', List['ChoiceConnectOrCreateWithoutRelationsInput']]

_ChoiceWhereUnique_id_Input = TypedDict(
    '_ChoiceWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

ChoiceWhereUniqueInput = _ChoiceWhereUnique_id_Input


class ChoiceUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    choice: Union[AtomicIntInput, _int]
    label: _str
    question: 'QuestionUpdateOneWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    pickedAnswers: 'AnswerUpdateManyWithoutRelationsInput'


class ChoiceUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    choice: Union[AtomicIntInput, _int]
    label: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ChoiceUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ChoiceCreateWithoutRelationsInput']
    connect: List['ChoiceWhereUniqueInput']
    connect_or_create: List['ChoiceConnectOrCreateWithoutRelationsInput']
    set: List['ChoiceWhereUniqueInput']
    disconnect: List['ChoiceWhereUniqueInput']
    delete: List['ChoiceWhereUniqueInput']

    # TODO
    # update: List['ChoiceUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ChoiceUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ChoiceScalarWhereInput']
    # upsert: List['ChoiceUpserteWithWhereUniqueWithoutRelationsInput']


class ChoiceUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ChoiceCreateWithoutRelationsInput'
    connect: 'ChoiceWhereUniqueInput'
    connect_or_create: 'ChoiceConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ChoiceUpdateInput'
    # upsert: 'ChoiceUpsertWithoutRelationsInput'


class ChoiceUpsertInput(TypedDict):
    create: 'ChoiceCreateInput'
    update: 'ChoiceUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Choice_id_OrderByInput = TypedDict(
    '_Choice_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Choice_choice_OrderByInput = TypedDict(
    '_Choice_choice_OrderByInput',
    {
        'choice': 'SortOrder',
    },
    total=True
)

_Choice_label_OrderByInput = TypedDict(
    '_Choice_label_OrderByInput',
    {
        'label': 'SortOrder',
    },
    total=True
)

_Choice_questionId_OrderByInput = TypedDict(
    '_Choice_questionId_OrderByInput',
    {
        'questionId': 'SortOrder',
    },
    total=True
)

_Choice_createdAt_OrderByInput = TypedDict(
    '_Choice_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Choice_updatedAt_OrderByInput = TypedDict(
    '_Choice_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Choice_RelevanceInner = TypedDict(
    '_Choice_RelevanceInner',
    {
        'fields': 'List[ChoiceScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Choice_RelevanceOrderByInput = TypedDict(
    '_Choice_RelevanceOrderByInput',
    {
        '_relevance': '_Choice_RelevanceInner',
    },
    total=True
)

ChoiceOrderByInput = Union[
    '_Choice_id_OrderByInput',
    '_Choice_choice_OrderByInput',
    '_Choice_label_OrderByInput',
    '_Choice_questionId_OrderByInput',
    '_Choice_createdAt_OrderByInput',
    '_Choice_updatedAt_OrderByInput',
    '_Choice_RelevanceOrderByInput',
]



# recursive Choice types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ChoiceRelationFilter = TypedDict(
    'ChoiceRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ChoiceListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ChoiceInclude(TypedDict, total=False):
    """Choice relational arguments"""
    question: Union[bool, 'QuestionArgsFromChoice']
    pickedAnswers: Union[bool, 'FindManyAnswerArgsFromChoice']


    

class QuestionIncludeFromChoice(TypedDict, total=False):
    """Relational arguments for Choice"""
    choices: Union[bool, 'FindManyChoiceArgsFromChoiceRecursive1']
    answers: Union[bool, 'FindManyAnswerArgsFromChoiceRecursive1']


class QuestionIncludeFromChoiceRecursive1(TypedDict, total=False):
    """Relational arguments for Choice"""
    choices: Union[bool, 'FindManyChoiceArgsFromChoiceRecursive2']
    answers: Union[bool, 'FindManyAnswerArgsFromChoiceRecursive2']


class QuestionIncludeFromChoiceRecursive2(TypedDict, total=False):
    """Relational arguments for Choice"""
    choices: Union[bool, 'FindManyChoiceArgsFromChoiceRecursive3']
    answers: Union[bool, 'FindManyAnswerArgsFromChoiceRecursive3']


class QuestionIncludeFromChoiceRecursive3(TypedDict, total=False):
    """Relational arguments for Choice"""
    choices: Union[bool, 'FindManyChoiceArgsFromChoiceRecursive4']
    answers: Union[bool, 'FindManyAnswerArgsFromChoiceRecursive4']


class QuestionIncludeFromChoiceRecursive4(TypedDict, total=False):
    """Relational arguments for Choice"""

    

class QuestionArgsFromChoice(TypedDict, total=False):
    """Arguments for Choice"""
    include: 'QuestionIncludeFromQuestionRecursive1'


class QuestionArgsFromChoiceRecursive1(TypedDict, total=False):
    """Arguments for Choice"""
    include: 'QuestionIncludeFromQuestionRecursive2'


class QuestionArgsFromChoiceRecursive2(TypedDict, total=False):
    """Arguments for Choice"""
    include: 'QuestionIncludeFromQuestionRecursive3'


class QuestionArgsFromChoiceRecursive3(TypedDict, total=False):
    """Arguments for Choice"""
    include: 'QuestionIncludeFromQuestionRecursive4'


class QuestionArgsFromChoiceRecursive4(TypedDict, total=False):
    """Arguments for Choice"""
    
    

class FindManyQuestionArgsFromChoice(TypedDict, total=False):
    """Arguments for Choice"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive1'


class FindManyQuestionArgsFromChoiceRecursive1(TypedDict, total=False):
    """Arguments for Choice"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive2'


class FindManyQuestionArgsFromChoiceRecursive2(TypedDict, total=False):
    """Arguments for Choice"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive3'


class FindManyQuestionArgsFromChoiceRecursive3(TypedDict, total=False):
    """Arguments for Choice"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive4'


class FindManyQuestionArgsFromChoiceRecursive4(TypedDict, total=False):
    """Arguments for Choice"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    
    

class ChoiceIncludeFromChoice(TypedDict, total=False):
    """Relational arguments for Choice"""
    question: Union[bool, 'QuestionArgsFromChoiceRecursive1']
    pickedAnswers: Union[bool, 'FindManyAnswerArgsFromChoiceRecursive1']


class ChoiceIncludeFromChoiceRecursive1(TypedDict, total=False):
    """Relational arguments for Choice"""
    question: Union[bool, 'QuestionArgsFromChoiceRecursive2']
    pickedAnswers: Union[bool, 'FindManyAnswerArgsFromChoiceRecursive2']


class ChoiceIncludeFromChoiceRecursive2(TypedDict, total=False):
    """Relational arguments for Choice"""
    question: Union[bool, 'QuestionArgsFromChoiceRecursive3']
    pickedAnswers: Union[bool, 'FindManyAnswerArgsFromChoiceRecursive3']


class ChoiceIncludeFromChoiceRecursive3(TypedDict, total=False):
    """Relational arguments for Choice"""
    question: Union[bool, 'QuestionArgsFromChoiceRecursive4']
    pickedAnswers: Union[bool, 'FindManyAnswerArgsFromChoiceRecursive4']


class ChoiceIncludeFromChoiceRecursive4(TypedDict, total=False):
    """Relational arguments for Choice"""

    

class ChoiceArgsFromChoice(TypedDict, total=False):
    """Arguments for Choice"""
    include: 'ChoiceIncludeFromChoiceRecursive1'


class ChoiceArgsFromChoiceRecursive1(TypedDict, total=False):
    """Arguments for Choice"""
    include: 'ChoiceIncludeFromChoiceRecursive2'


class ChoiceArgsFromChoiceRecursive2(TypedDict, total=False):
    """Arguments for Choice"""
    include: 'ChoiceIncludeFromChoiceRecursive3'


class ChoiceArgsFromChoiceRecursive3(TypedDict, total=False):
    """Arguments for Choice"""
    include: 'ChoiceIncludeFromChoiceRecursive4'


class ChoiceArgsFromChoiceRecursive4(TypedDict, total=False):
    """Arguments for Choice"""
    
    

class FindManyChoiceArgsFromChoice(TypedDict, total=False):
    """Arguments for Choice"""
    take: int
    skip: int
    order_by: Union['ChoiceOrderByInput', List['ChoiceOrderByInput']]
    where: 'ChoiceWhereInput'
    cursor: 'ChoiceWhereUniqueInput'
    distinct: List['ChoiceScalarFieldKeys']
    include: 'ChoiceIncludeFromChoiceRecursive1'


class FindManyChoiceArgsFromChoiceRecursive1(TypedDict, total=False):
    """Arguments for Choice"""
    take: int
    skip: int
    order_by: Union['ChoiceOrderByInput', List['ChoiceOrderByInput']]
    where: 'ChoiceWhereInput'
    cursor: 'ChoiceWhereUniqueInput'
    distinct: List['ChoiceScalarFieldKeys']
    include: 'ChoiceIncludeFromChoiceRecursive2'


class FindManyChoiceArgsFromChoiceRecursive2(TypedDict, total=False):
    """Arguments for Choice"""
    take: int
    skip: int
    order_by: Union['ChoiceOrderByInput', List['ChoiceOrderByInput']]
    where: 'ChoiceWhereInput'
    cursor: 'ChoiceWhereUniqueInput'
    distinct: List['ChoiceScalarFieldKeys']
    include: 'ChoiceIncludeFromChoiceRecursive3'


class FindManyChoiceArgsFromChoiceRecursive3(TypedDict, total=False):
    """Arguments for Choice"""
    take: int
    skip: int
    order_by: Union['ChoiceOrderByInput', List['ChoiceOrderByInput']]
    where: 'ChoiceWhereInput'
    cursor: 'ChoiceWhereUniqueInput'
    distinct: List['ChoiceScalarFieldKeys']
    include: 'ChoiceIncludeFromChoiceRecursive4'


class FindManyChoiceArgsFromChoiceRecursive4(TypedDict, total=False):
    """Arguments for Choice"""
    take: int
    skip: int
    order_by: Union['ChoiceOrderByInput', List['ChoiceOrderByInput']]
    where: 'ChoiceWhereInput'
    cursor: 'ChoiceWhereUniqueInput'
    distinct: List['ChoiceScalarFieldKeys']
    
    

class AnswerIncludeFromChoice(TypedDict, total=False):
    """Relational arguments for Choice"""
    question: Union[bool, 'QuestionArgsFromChoiceRecursive1']
    choice: Union[bool, 'ChoiceArgsFromChoiceRecursive1']
    profile: Union[bool, 'ProfileArgsFromChoiceRecursive1']


class AnswerIncludeFromChoiceRecursive1(TypedDict, total=False):
    """Relational arguments for Choice"""
    question: Union[bool, 'QuestionArgsFromChoiceRecursive2']
    choice: Union[bool, 'ChoiceArgsFromChoiceRecursive2']
    profile: Union[bool, 'ProfileArgsFromChoiceRecursive2']


class AnswerIncludeFromChoiceRecursive2(TypedDict, total=False):
    """Relational arguments for Choice"""
    question: Union[bool, 'QuestionArgsFromChoiceRecursive3']
    choice: Union[bool, 'ChoiceArgsFromChoiceRecursive3']
    profile: Union[bool, 'ProfileArgsFromChoiceRecursive3']


class AnswerIncludeFromChoiceRecursive3(TypedDict, total=False):
    """Relational arguments for Choice"""
    question: Union[bool, 'QuestionArgsFromChoiceRecursive4']
    choice: Union[bool, 'ChoiceArgsFromChoiceRecursive4']
    profile: Union[bool, 'ProfileArgsFromChoiceRecursive4']


class AnswerIncludeFromChoiceRecursive4(TypedDict, total=False):
    """Relational arguments for Choice"""

    

class AnswerArgsFromChoice(TypedDict, total=False):
    """Arguments for Choice"""
    include: 'AnswerIncludeFromAnswerRecursive1'


class AnswerArgsFromChoiceRecursive1(TypedDict, total=False):
    """Arguments for Choice"""
    include: 'AnswerIncludeFromAnswerRecursive2'


class AnswerArgsFromChoiceRecursive2(TypedDict, total=False):
    """Arguments for Choice"""
    include: 'AnswerIncludeFromAnswerRecursive3'


class AnswerArgsFromChoiceRecursive3(TypedDict, total=False):
    """Arguments for Choice"""
    include: 'AnswerIncludeFromAnswerRecursive4'


class AnswerArgsFromChoiceRecursive4(TypedDict, total=False):
    """Arguments for Choice"""
    
    

class FindManyAnswerArgsFromChoice(TypedDict, total=False):
    """Arguments for Choice"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    include: 'AnswerIncludeFromAnswerRecursive1'


class FindManyAnswerArgsFromChoiceRecursive1(TypedDict, total=False):
    """Arguments for Choice"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    include: 'AnswerIncludeFromAnswerRecursive2'


class FindManyAnswerArgsFromChoiceRecursive2(TypedDict, total=False):
    """Arguments for Choice"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    include: 'AnswerIncludeFromAnswerRecursive3'


class FindManyAnswerArgsFromChoiceRecursive3(TypedDict, total=False):
    """Arguments for Choice"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    include: 'AnswerIncludeFromAnswerRecursive4'


class FindManyAnswerArgsFromChoiceRecursive4(TypedDict, total=False):
    """Arguments for Choice"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    
    

class ProfileIncludeFromChoice(TypedDict, total=False):
    """Relational arguments for Choice"""
    answers: Union[bool, 'FindManyAnswerArgsFromChoiceRecursive1']
    results: Union[bool, 'FindManyResultArgsFromChoiceRecursive1']


class ProfileIncludeFromChoiceRecursive1(TypedDict, total=False):
    """Relational arguments for Choice"""
    answers: Union[bool, 'FindManyAnswerArgsFromChoiceRecursive2']
    results: Union[bool, 'FindManyResultArgsFromChoiceRecursive2']


class ProfileIncludeFromChoiceRecursive2(TypedDict, total=False):
    """Relational arguments for Choice"""
    answers: Union[bool, 'FindManyAnswerArgsFromChoiceRecursive3']
    results: Union[bool, 'FindManyResultArgsFromChoiceRecursive3']


class ProfileIncludeFromChoiceRecursive3(TypedDict, total=False):
    """Relational arguments for Choice"""
    answers: Union[bool, 'FindManyAnswerArgsFromChoiceRecursive4']
    results: Union[bool, 'FindManyResultArgsFromChoiceRecursive4']


class ProfileIncludeFromChoiceRecursive4(TypedDict, total=False):
    """Relational arguments for Choice"""

    

class ProfileArgsFromChoice(TypedDict, total=False):
    """Arguments for Choice"""
    include: 'ProfileIncludeFromProfileRecursive1'


class ProfileArgsFromChoiceRecursive1(TypedDict, total=False):
    """Arguments for Choice"""
    include: 'ProfileIncludeFromProfileRecursive2'


class ProfileArgsFromChoiceRecursive2(TypedDict, total=False):
    """Arguments for Choice"""
    include: 'ProfileIncludeFromProfileRecursive3'


class ProfileArgsFromChoiceRecursive3(TypedDict, total=False):
    """Arguments for Choice"""
    include: 'ProfileIncludeFromProfileRecursive4'


class ProfileArgsFromChoiceRecursive4(TypedDict, total=False):
    """Arguments for Choice"""
    
    

class FindManyProfileArgsFromChoice(TypedDict, total=False):
    """Arguments for Choice"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive1'


class FindManyProfileArgsFromChoiceRecursive1(TypedDict, total=False):
    """Arguments for Choice"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive2'


class FindManyProfileArgsFromChoiceRecursive2(TypedDict, total=False):
    """Arguments for Choice"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive3'


class FindManyProfileArgsFromChoiceRecursive3(TypedDict, total=False):
    """Arguments for Choice"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive4'


class FindManyProfileArgsFromChoiceRecursive4(TypedDict, total=False):
    """Arguments for Choice"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    
    

class ResultIncludeFromChoice(TypedDict, total=False):
    """Relational arguments for Choice"""
    profile: Union[bool, 'ProfileArgsFromChoiceRecursive1']


class ResultIncludeFromChoiceRecursive1(TypedDict, total=False):
    """Relational arguments for Choice"""
    profile: Union[bool, 'ProfileArgsFromChoiceRecursive2']


class ResultIncludeFromChoiceRecursive2(TypedDict, total=False):
    """Relational arguments for Choice"""
    profile: Union[bool, 'ProfileArgsFromChoiceRecursive3']


class ResultIncludeFromChoiceRecursive3(TypedDict, total=False):
    """Relational arguments for Choice"""
    profile: Union[bool, 'ProfileArgsFromChoiceRecursive4']


class ResultIncludeFromChoiceRecursive4(TypedDict, total=False):
    """Relational arguments for Choice"""

    

class ResultArgsFromChoice(TypedDict, total=False):
    """Arguments for Choice"""
    include: 'ResultIncludeFromResultRecursive1'


class ResultArgsFromChoiceRecursive1(TypedDict, total=False):
    """Arguments for Choice"""
    include: 'ResultIncludeFromResultRecursive2'


class ResultArgsFromChoiceRecursive2(TypedDict, total=False):
    """Arguments for Choice"""
    include: 'ResultIncludeFromResultRecursive3'


class ResultArgsFromChoiceRecursive3(TypedDict, total=False):
    """Arguments for Choice"""
    include: 'ResultIncludeFromResultRecursive4'


class ResultArgsFromChoiceRecursive4(TypedDict, total=False):
    """Arguments for Choice"""
    
    

class FindManyResultArgsFromChoice(TypedDict, total=False):
    """Arguments for Choice"""
    take: int
    skip: int
    order_by: Union['ResultOrderByInput', List['ResultOrderByInput']]
    where: 'ResultWhereInput'
    cursor: 'ResultWhereUniqueInput'
    distinct: List['ResultScalarFieldKeys']
    include: 'ResultIncludeFromResultRecursive1'


class FindManyResultArgsFromChoiceRecursive1(TypedDict, total=False):
    """Arguments for Choice"""
    take: int
    skip: int
    order_by: Union['ResultOrderByInput', List['ResultOrderByInput']]
    where: 'ResultWhereInput'
    cursor: 'ResultWhereUniqueInput'
    distinct: List['ResultScalarFieldKeys']
    include: 'ResultIncludeFromResultRecursive2'


class FindManyResultArgsFromChoiceRecursive2(TypedDict, total=False):
    """Arguments for Choice"""
    take: int
    skip: int
    order_by: Union['ResultOrderByInput', List['ResultOrderByInput']]
    where: 'ResultWhereInput'
    cursor: 'ResultWhereUniqueInput'
    distinct: List['ResultScalarFieldKeys']
    include: 'ResultIncludeFromResultRecursive3'


class FindManyResultArgsFromChoiceRecursive3(TypedDict, total=False):
    """Arguments for Choice"""
    take: int
    skip: int
    order_by: Union['ResultOrderByInput', List['ResultOrderByInput']]
    where: 'ResultWhereInput'
    cursor: 'ResultWhereUniqueInput'
    distinct: List['ResultScalarFieldKeys']
    include: 'ResultIncludeFromResultRecursive4'


class FindManyResultArgsFromChoiceRecursive4(TypedDict, total=False):
    """Arguments for Choice"""
    take: int
    skip: int
    order_by: Union['ResultOrderByInput', List['ResultOrderByInput']]
    where: 'ResultWhereInput'
    cursor: 'ResultWhereUniqueInput'
    distinct: List['ResultScalarFieldKeys']
    


FindManyChoiceArgs = FindManyChoiceArgsFromChoice
FindFirstChoiceArgs = FindManyChoiceArgsFromChoice


    

class ChoiceWhereInput(TypedDict, total=False):
    """Choice arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    choice: Union[_int, 'types.IntFilter']
    label: Union[_str, 'types.StringFilter']
    questionId: Union[_str, 'types.StringFilter']
    question: 'QuestionRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    pickedAnswers: 'AnswerListRelationFilter'

    # should be noted that AND and NOT should be Union['ChoiceWhereInputRecursive1', List['ChoiceWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ChoiceWhereInputRecursive1']
    OR: List['ChoiceWhereInputRecursive1']
    NOT: List['ChoiceWhereInputRecursive1']


class ChoiceWhereInputRecursive1(TypedDict, total=False):
    """Choice arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    choice: Union[_int, 'types.IntFilter']
    label: Union[_str, 'types.StringFilter']
    questionId: Union[_str, 'types.StringFilter']
    question: 'QuestionRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    pickedAnswers: 'AnswerListRelationFilter'

    # should be noted that AND and NOT should be Union['ChoiceWhereInputRecursive2', List['ChoiceWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ChoiceWhereInputRecursive2']
    OR: List['ChoiceWhereInputRecursive2']
    NOT: List['ChoiceWhereInputRecursive2']


class ChoiceWhereInputRecursive2(TypedDict, total=False):
    """Choice arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    choice: Union[_int, 'types.IntFilter']
    label: Union[_str, 'types.StringFilter']
    questionId: Union[_str, 'types.StringFilter']
    question: 'QuestionRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    pickedAnswers: 'AnswerListRelationFilter'

    # should be noted that AND and NOT should be Union['ChoiceWhereInputRecursive3', List['ChoiceWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ChoiceWhereInputRecursive3']
    OR: List['ChoiceWhereInputRecursive3']
    NOT: List['ChoiceWhereInputRecursive3']


class ChoiceWhereInputRecursive3(TypedDict, total=False):
    """Choice arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    choice: Union[_int, 'types.IntFilter']
    label: Union[_str, 'types.StringFilter']
    questionId: Union[_str, 'types.StringFilter']
    question: 'QuestionRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    pickedAnswers: 'AnswerListRelationFilter'

    # should be noted that AND and NOT should be Union['ChoiceWhereInputRecursive4', List['ChoiceWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ChoiceWhereInputRecursive4']
    OR: List['ChoiceWhereInputRecursive4']
    NOT: List['ChoiceWhereInputRecursive4']


class ChoiceWhereInputRecursive4(TypedDict, total=False):
    """Choice arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    choice: Union[_int, 'types.IntFilter']
    label: Union[_str, 'types.StringFilter']
    questionId: Union[_str, 'types.StringFilter']
    question: 'QuestionRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    pickedAnswers: 'AnswerListRelationFilter'



# aggregate Choice types


    

class ChoiceScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Choice arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    choice: Union[_int, 'types.IntWithAggregatesFilter']
    label: Union[_str, 'types.StringWithAggregatesFilter']
    questionId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ChoiceScalarWhereWithAggregatesInputRecursive1']
    OR: List['ChoiceScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ChoiceScalarWhereWithAggregatesInputRecursive1']


class ChoiceScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Choice arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    choice: Union[_int, 'types.IntWithAggregatesFilter']
    label: Union[_str, 'types.StringWithAggregatesFilter']
    questionId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ChoiceScalarWhereWithAggregatesInputRecursive2']
    OR: List['ChoiceScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ChoiceScalarWhereWithAggregatesInputRecursive2']


class ChoiceScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Choice arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    choice: Union[_int, 'types.IntWithAggregatesFilter']
    label: Union[_str, 'types.StringWithAggregatesFilter']
    questionId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ChoiceScalarWhereWithAggregatesInputRecursive3']
    OR: List['ChoiceScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ChoiceScalarWhereWithAggregatesInputRecursive3']


class ChoiceScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Choice arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    choice: Union[_int, 'types.IntWithAggregatesFilter']
    label: Union[_str, 'types.StringWithAggregatesFilter']
    questionId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ChoiceScalarWhereWithAggregatesInputRecursive4']
    OR: List['ChoiceScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ChoiceScalarWhereWithAggregatesInputRecursive4']


class ChoiceScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Choice arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    choice: Union[_int, 'types.IntWithAggregatesFilter']
    label: Union[_str, 'types.StringWithAggregatesFilter']
    questionId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class ChoiceGroupByOutput(TypedDict, total=False):
    id: _str
    choice: _int
    label: _str
    questionId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'ChoiceSumAggregateOutput'
    _avg: 'ChoiceAvgAggregateOutput'
    _min: 'ChoiceMinAggregateOutput'
    _max: 'ChoiceMaxAggregateOutput'
    _count: 'ChoiceCountAggregateOutput'


class ChoiceAvgAggregateOutput(TypedDict, total=False):
    """Choice output for aggregating averages"""
    choice: float


class ChoiceSumAggregateOutput(TypedDict, total=False):
    """Choice output for aggregating sums"""
    choice: _int


class ChoiceScalarAggregateOutput(TypedDict, total=False):
    """Choice output including scalar fields"""
    id: _str
    choice: _int
    label: _str
    questionId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


ChoiceMinAggregateOutput = ChoiceScalarAggregateOutput
ChoiceMaxAggregateOutput = ChoiceScalarAggregateOutput


class ChoiceMaxAggregateInput(TypedDict, total=False):
    """Choice input for aggregating by max"""
    id: bool
    choice: bool
    label: bool
    questionId: bool
    createdAt: bool
    updatedAt: bool


class ChoiceMinAggregateInput(TypedDict, total=False):
    """Choice input for aggregating by min"""
    id: bool
    choice: bool
    label: bool
    questionId: bool
    createdAt: bool
    updatedAt: bool


class ChoiceNumberAggregateInput(TypedDict, total=False):
    """Choice input for aggregating numbers"""
    choice: bool


ChoiceAvgAggregateInput = ChoiceNumberAggregateInput
ChoiceSumAggregateInput = ChoiceNumberAggregateInput


ChoiceCountAggregateInput = TypedDict(
    'ChoiceCountAggregateInput',
    {
        'id': bool,
        'choice': bool,
        'label': bool,
        'questionId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

ChoiceCountAggregateOutput = TypedDict(
    'ChoiceCountAggregateOutput',
    {
        'id': int,
        'choice': int,
        'label': int,
        'questionId': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


ChoiceKeys = Literal[
    'id',
    'choice',
    'label',
    'questionId',
    'question',
    'createdAt',
    'updatedAt',
    'pickedAnswers',
]
ChoiceScalarFieldKeys = Literal[
    'id',
    'choice',
    'label',
    'questionId',
    'createdAt',
    'updatedAt',
]
ChoiceScalarFieldKeysT = TypeVar('ChoiceScalarFieldKeysT', bound=ChoiceScalarFieldKeys)

ChoiceRelationalFieldKeys = Literal[
        'question',
        'pickedAnswers',
    ]

# Answer types

class AnswerOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Answer create method"""
    id: _str
    question: 'QuestionCreateNestedWithoutRelationsInput'
    questionId: _str
    choice: 'ChoiceCreateNestedWithoutRelationsInput'
    choiceId: _str
    profile: 'ProfileCreateNestedWithoutRelationsInput'
    profileId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class AnswerCreateInput(AnswerOptionalCreateInput):
    """Required arguments to the Answer create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class AnswerOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Answer create method, without relations"""
    id: _str
    questionId: _str
    choiceId: _str
    profileId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class AnswerCreateWithoutRelationsInput(AnswerOptionalCreateWithoutRelationsInput):
    """Required arguments to the Answer create method, without relations"""

class AnswerConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'AnswerCreateWithoutRelationsInput'
    where: 'AnswerWhereUniqueInput'

class AnswerCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'AnswerCreateWithoutRelationsInput'
    connect: 'AnswerWhereUniqueInput'
    connect_or_create: 'AnswerConnectOrCreateWithoutRelationsInput'


class AnswerCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['AnswerCreateWithoutRelationsInput', List['AnswerCreateWithoutRelationsInput']]
    connect: Union['AnswerWhereUniqueInput', List['AnswerWhereUniqueInput']]
    connect_or_create: Union['AnswerConnectOrCreateWithoutRelationsInput', List['AnswerConnectOrCreateWithoutRelationsInput']]

_AnswerWhereUnique_id_Input = TypedDict(
    '_AnswerWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

AnswerWhereUniqueInput = _AnswerWhereUnique_id_Input


class AnswerUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    question: 'QuestionUpdateOneWithoutRelationsInput'
    choice: 'ChoiceUpdateOneWithoutRelationsInput'
    profile: 'ProfileUpdateOneWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class AnswerUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class AnswerUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['AnswerCreateWithoutRelationsInput']
    connect: List['AnswerWhereUniqueInput']
    connect_or_create: List['AnswerConnectOrCreateWithoutRelationsInput']
    set: List['AnswerWhereUniqueInput']
    disconnect: List['AnswerWhereUniqueInput']
    delete: List['AnswerWhereUniqueInput']

    # TODO
    # update: List['AnswerUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['AnswerUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['AnswerScalarWhereInput']
    # upsert: List['AnswerUpserteWithWhereUniqueWithoutRelationsInput']


class AnswerUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'AnswerCreateWithoutRelationsInput'
    connect: 'AnswerWhereUniqueInput'
    connect_or_create: 'AnswerConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'AnswerUpdateInput'
    # upsert: 'AnswerUpsertWithoutRelationsInput'


class AnswerUpsertInput(TypedDict):
    create: 'AnswerCreateInput'
    update: 'AnswerUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Answer_id_OrderByInput = TypedDict(
    '_Answer_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Answer_questionId_OrderByInput = TypedDict(
    '_Answer_questionId_OrderByInput',
    {
        'questionId': 'SortOrder',
    },
    total=True
)

_Answer_choiceId_OrderByInput = TypedDict(
    '_Answer_choiceId_OrderByInput',
    {
        'choiceId': 'SortOrder',
    },
    total=True
)

_Answer_profileId_OrderByInput = TypedDict(
    '_Answer_profileId_OrderByInput',
    {
        'profileId': 'SortOrder',
    },
    total=True
)

_Answer_createdAt_OrderByInput = TypedDict(
    '_Answer_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Answer_updatedAt_OrderByInput = TypedDict(
    '_Answer_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Answer_RelevanceInner = TypedDict(
    '_Answer_RelevanceInner',
    {
        'fields': 'List[AnswerScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Answer_RelevanceOrderByInput = TypedDict(
    '_Answer_RelevanceOrderByInput',
    {
        '_relevance': '_Answer_RelevanceInner',
    },
    total=True
)

AnswerOrderByInput = Union[
    '_Answer_id_OrderByInput',
    '_Answer_questionId_OrderByInput',
    '_Answer_choiceId_OrderByInput',
    '_Answer_profileId_OrderByInput',
    '_Answer_createdAt_OrderByInput',
    '_Answer_updatedAt_OrderByInput',
    '_Answer_RelevanceOrderByInput',
]



# recursive Answer types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

AnswerRelationFilter = TypedDict(
    'AnswerRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class AnswerListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class AnswerInclude(TypedDict, total=False):
    """Answer relational arguments"""
    question: Union[bool, 'QuestionArgsFromAnswer']
    choice: Union[bool, 'ChoiceArgsFromAnswer']
    profile: Union[bool, 'ProfileArgsFromAnswer']


    

class QuestionIncludeFromAnswer(TypedDict, total=False):
    """Relational arguments for Answer"""
    choices: Union[bool, 'FindManyChoiceArgsFromAnswerRecursive1']
    answers: Union[bool, 'FindManyAnswerArgsFromAnswerRecursive1']


class QuestionIncludeFromAnswerRecursive1(TypedDict, total=False):
    """Relational arguments for Answer"""
    choices: Union[bool, 'FindManyChoiceArgsFromAnswerRecursive2']
    answers: Union[bool, 'FindManyAnswerArgsFromAnswerRecursive2']


class QuestionIncludeFromAnswerRecursive2(TypedDict, total=False):
    """Relational arguments for Answer"""
    choices: Union[bool, 'FindManyChoiceArgsFromAnswerRecursive3']
    answers: Union[bool, 'FindManyAnswerArgsFromAnswerRecursive3']


class QuestionIncludeFromAnswerRecursive3(TypedDict, total=False):
    """Relational arguments for Answer"""
    choices: Union[bool, 'FindManyChoiceArgsFromAnswerRecursive4']
    answers: Union[bool, 'FindManyAnswerArgsFromAnswerRecursive4']


class QuestionIncludeFromAnswerRecursive4(TypedDict, total=False):
    """Relational arguments for Answer"""

    

class QuestionArgsFromAnswer(TypedDict, total=False):
    """Arguments for Answer"""
    include: 'QuestionIncludeFromQuestionRecursive1'


class QuestionArgsFromAnswerRecursive1(TypedDict, total=False):
    """Arguments for Answer"""
    include: 'QuestionIncludeFromQuestionRecursive2'


class QuestionArgsFromAnswerRecursive2(TypedDict, total=False):
    """Arguments for Answer"""
    include: 'QuestionIncludeFromQuestionRecursive3'


class QuestionArgsFromAnswerRecursive3(TypedDict, total=False):
    """Arguments for Answer"""
    include: 'QuestionIncludeFromQuestionRecursive4'


class QuestionArgsFromAnswerRecursive4(TypedDict, total=False):
    """Arguments for Answer"""
    
    

class FindManyQuestionArgsFromAnswer(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive1'


class FindManyQuestionArgsFromAnswerRecursive1(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive2'


class FindManyQuestionArgsFromAnswerRecursive2(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive3'


class FindManyQuestionArgsFromAnswerRecursive3(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive4'


class FindManyQuestionArgsFromAnswerRecursive4(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    
    

class ChoiceIncludeFromAnswer(TypedDict, total=False):
    """Relational arguments for Answer"""
    question: Union[bool, 'QuestionArgsFromAnswerRecursive1']
    pickedAnswers: Union[bool, 'FindManyAnswerArgsFromAnswerRecursive1']


class ChoiceIncludeFromAnswerRecursive1(TypedDict, total=False):
    """Relational arguments for Answer"""
    question: Union[bool, 'QuestionArgsFromAnswerRecursive2']
    pickedAnswers: Union[bool, 'FindManyAnswerArgsFromAnswerRecursive2']


class ChoiceIncludeFromAnswerRecursive2(TypedDict, total=False):
    """Relational arguments for Answer"""
    question: Union[bool, 'QuestionArgsFromAnswerRecursive3']
    pickedAnswers: Union[bool, 'FindManyAnswerArgsFromAnswerRecursive3']


class ChoiceIncludeFromAnswerRecursive3(TypedDict, total=False):
    """Relational arguments for Answer"""
    question: Union[bool, 'QuestionArgsFromAnswerRecursive4']
    pickedAnswers: Union[bool, 'FindManyAnswerArgsFromAnswerRecursive4']


class ChoiceIncludeFromAnswerRecursive4(TypedDict, total=False):
    """Relational arguments for Answer"""

    

class ChoiceArgsFromAnswer(TypedDict, total=False):
    """Arguments for Answer"""
    include: 'ChoiceIncludeFromChoiceRecursive1'


class ChoiceArgsFromAnswerRecursive1(TypedDict, total=False):
    """Arguments for Answer"""
    include: 'ChoiceIncludeFromChoiceRecursive2'


class ChoiceArgsFromAnswerRecursive2(TypedDict, total=False):
    """Arguments for Answer"""
    include: 'ChoiceIncludeFromChoiceRecursive3'


class ChoiceArgsFromAnswerRecursive3(TypedDict, total=False):
    """Arguments for Answer"""
    include: 'ChoiceIncludeFromChoiceRecursive4'


class ChoiceArgsFromAnswerRecursive4(TypedDict, total=False):
    """Arguments for Answer"""
    
    

class FindManyChoiceArgsFromAnswer(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['ChoiceOrderByInput', List['ChoiceOrderByInput']]
    where: 'ChoiceWhereInput'
    cursor: 'ChoiceWhereUniqueInput'
    distinct: List['ChoiceScalarFieldKeys']
    include: 'ChoiceIncludeFromChoiceRecursive1'


class FindManyChoiceArgsFromAnswerRecursive1(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['ChoiceOrderByInput', List['ChoiceOrderByInput']]
    where: 'ChoiceWhereInput'
    cursor: 'ChoiceWhereUniqueInput'
    distinct: List['ChoiceScalarFieldKeys']
    include: 'ChoiceIncludeFromChoiceRecursive2'


class FindManyChoiceArgsFromAnswerRecursive2(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['ChoiceOrderByInput', List['ChoiceOrderByInput']]
    where: 'ChoiceWhereInput'
    cursor: 'ChoiceWhereUniqueInput'
    distinct: List['ChoiceScalarFieldKeys']
    include: 'ChoiceIncludeFromChoiceRecursive3'


class FindManyChoiceArgsFromAnswerRecursive3(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['ChoiceOrderByInput', List['ChoiceOrderByInput']]
    where: 'ChoiceWhereInput'
    cursor: 'ChoiceWhereUniqueInput'
    distinct: List['ChoiceScalarFieldKeys']
    include: 'ChoiceIncludeFromChoiceRecursive4'


class FindManyChoiceArgsFromAnswerRecursive4(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['ChoiceOrderByInput', List['ChoiceOrderByInput']]
    where: 'ChoiceWhereInput'
    cursor: 'ChoiceWhereUniqueInput'
    distinct: List['ChoiceScalarFieldKeys']
    
    

class AnswerIncludeFromAnswer(TypedDict, total=False):
    """Relational arguments for Answer"""
    question: Union[bool, 'QuestionArgsFromAnswerRecursive1']
    choice: Union[bool, 'ChoiceArgsFromAnswerRecursive1']
    profile: Union[bool, 'ProfileArgsFromAnswerRecursive1']


class AnswerIncludeFromAnswerRecursive1(TypedDict, total=False):
    """Relational arguments for Answer"""
    question: Union[bool, 'QuestionArgsFromAnswerRecursive2']
    choice: Union[bool, 'ChoiceArgsFromAnswerRecursive2']
    profile: Union[bool, 'ProfileArgsFromAnswerRecursive2']


class AnswerIncludeFromAnswerRecursive2(TypedDict, total=False):
    """Relational arguments for Answer"""
    question: Union[bool, 'QuestionArgsFromAnswerRecursive3']
    choice: Union[bool, 'ChoiceArgsFromAnswerRecursive3']
    profile: Union[bool, 'ProfileArgsFromAnswerRecursive3']


class AnswerIncludeFromAnswerRecursive3(TypedDict, total=False):
    """Relational arguments for Answer"""
    question: Union[bool, 'QuestionArgsFromAnswerRecursive4']
    choice: Union[bool, 'ChoiceArgsFromAnswerRecursive4']
    profile: Union[bool, 'ProfileArgsFromAnswerRecursive4']


class AnswerIncludeFromAnswerRecursive4(TypedDict, total=False):
    """Relational arguments for Answer"""

    

class AnswerArgsFromAnswer(TypedDict, total=False):
    """Arguments for Answer"""
    include: 'AnswerIncludeFromAnswerRecursive1'


class AnswerArgsFromAnswerRecursive1(TypedDict, total=False):
    """Arguments for Answer"""
    include: 'AnswerIncludeFromAnswerRecursive2'


class AnswerArgsFromAnswerRecursive2(TypedDict, total=False):
    """Arguments for Answer"""
    include: 'AnswerIncludeFromAnswerRecursive3'


class AnswerArgsFromAnswerRecursive3(TypedDict, total=False):
    """Arguments for Answer"""
    include: 'AnswerIncludeFromAnswerRecursive4'


class AnswerArgsFromAnswerRecursive4(TypedDict, total=False):
    """Arguments for Answer"""
    
    

class FindManyAnswerArgsFromAnswer(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    include: 'AnswerIncludeFromAnswerRecursive1'


class FindManyAnswerArgsFromAnswerRecursive1(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    include: 'AnswerIncludeFromAnswerRecursive2'


class FindManyAnswerArgsFromAnswerRecursive2(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    include: 'AnswerIncludeFromAnswerRecursive3'


class FindManyAnswerArgsFromAnswerRecursive3(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    include: 'AnswerIncludeFromAnswerRecursive4'


class FindManyAnswerArgsFromAnswerRecursive4(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    
    

class ProfileIncludeFromAnswer(TypedDict, total=False):
    """Relational arguments for Answer"""
    answers: Union[bool, 'FindManyAnswerArgsFromAnswerRecursive1']
    results: Union[bool, 'FindManyResultArgsFromAnswerRecursive1']


class ProfileIncludeFromAnswerRecursive1(TypedDict, total=False):
    """Relational arguments for Answer"""
    answers: Union[bool, 'FindManyAnswerArgsFromAnswerRecursive2']
    results: Union[bool, 'FindManyResultArgsFromAnswerRecursive2']


class ProfileIncludeFromAnswerRecursive2(TypedDict, total=False):
    """Relational arguments for Answer"""
    answers: Union[bool, 'FindManyAnswerArgsFromAnswerRecursive3']
    results: Union[bool, 'FindManyResultArgsFromAnswerRecursive3']


class ProfileIncludeFromAnswerRecursive3(TypedDict, total=False):
    """Relational arguments for Answer"""
    answers: Union[bool, 'FindManyAnswerArgsFromAnswerRecursive4']
    results: Union[bool, 'FindManyResultArgsFromAnswerRecursive4']


class ProfileIncludeFromAnswerRecursive4(TypedDict, total=False):
    """Relational arguments for Answer"""

    

class ProfileArgsFromAnswer(TypedDict, total=False):
    """Arguments for Answer"""
    include: 'ProfileIncludeFromProfileRecursive1'


class ProfileArgsFromAnswerRecursive1(TypedDict, total=False):
    """Arguments for Answer"""
    include: 'ProfileIncludeFromProfileRecursive2'


class ProfileArgsFromAnswerRecursive2(TypedDict, total=False):
    """Arguments for Answer"""
    include: 'ProfileIncludeFromProfileRecursive3'


class ProfileArgsFromAnswerRecursive3(TypedDict, total=False):
    """Arguments for Answer"""
    include: 'ProfileIncludeFromProfileRecursive4'


class ProfileArgsFromAnswerRecursive4(TypedDict, total=False):
    """Arguments for Answer"""
    
    

class FindManyProfileArgsFromAnswer(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive1'


class FindManyProfileArgsFromAnswerRecursive1(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive2'


class FindManyProfileArgsFromAnswerRecursive2(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive3'


class FindManyProfileArgsFromAnswerRecursive3(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive4'


class FindManyProfileArgsFromAnswerRecursive4(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    
    

class ResultIncludeFromAnswer(TypedDict, total=False):
    """Relational arguments for Answer"""
    profile: Union[bool, 'ProfileArgsFromAnswerRecursive1']


class ResultIncludeFromAnswerRecursive1(TypedDict, total=False):
    """Relational arguments for Answer"""
    profile: Union[bool, 'ProfileArgsFromAnswerRecursive2']


class ResultIncludeFromAnswerRecursive2(TypedDict, total=False):
    """Relational arguments for Answer"""
    profile: Union[bool, 'ProfileArgsFromAnswerRecursive3']


class ResultIncludeFromAnswerRecursive3(TypedDict, total=False):
    """Relational arguments for Answer"""
    profile: Union[bool, 'ProfileArgsFromAnswerRecursive4']


class ResultIncludeFromAnswerRecursive4(TypedDict, total=False):
    """Relational arguments for Answer"""

    

class ResultArgsFromAnswer(TypedDict, total=False):
    """Arguments for Answer"""
    include: 'ResultIncludeFromResultRecursive1'


class ResultArgsFromAnswerRecursive1(TypedDict, total=False):
    """Arguments for Answer"""
    include: 'ResultIncludeFromResultRecursive2'


class ResultArgsFromAnswerRecursive2(TypedDict, total=False):
    """Arguments for Answer"""
    include: 'ResultIncludeFromResultRecursive3'


class ResultArgsFromAnswerRecursive3(TypedDict, total=False):
    """Arguments for Answer"""
    include: 'ResultIncludeFromResultRecursive4'


class ResultArgsFromAnswerRecursive4(TypedDict, total=False):
    """Arguments for Answer"""
    
    

class FindManyResultArgsFromAnswer(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['ResultOrderByInput', List['ResultOrderByInput']]
    where: 'ResultWhereInput'
    cursor: 'ResultWhereUniqueInput'
    distinct: List['ResultScalarFieldKeys']
    include: 'ResultIncludeFromResultRecursive1'


class FindManyResultArgsFromAnswerRecursive1(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['ResultOrderByInput', List['ResultOrderByInput']]
    where: 'ResultWhereInput'
    cursor: 'ResultWhereUniqueInput'
    distinct: List['ResultScalarFieldKeys']
    include: 'ResultIncludeFromResultRecursive2'


class FindManyResultArgsFromAnswerRecursive2(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['ResultOrderByInput', List['ResultOrderByInput']]
    where: 'ResultWhereInput'
    cursor: 'ResultWhereUniqueInput'
    distinct: List['ResultScalarFieldKeys']
    include: 'ResultIncludeFromResultRecursive3'


class FindManyResultArgsFromAnswerRecursive3(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['ResultOrderByInput', List['ResultOrderByInput']]
    where: 'ResultWhereInput'
    cursor: 'ResultWhereUniqueInput'
    distinct: List['ResultScalarFieldKeys']
    include: 'ResultIncludeFromResultRecursive4'


class FindManyResultArgsFromAnswerRecursive4(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['ResultOrderByInput', List['ResultOrderByInput']]
    where: 'ResultWhereInput'
    cursor: 'ResultWhereUniqueInput'
    distinct: List['ResultScalarFieldKeys']
    


FindManyAnswerArgs = FindManyAnswerArgsFromAnswer
FindFirstAnswerArgs = FindManyAnswerArgsFromAnswer


    

class AnswerWhereInput(TypedDict, total=False):
    """Answer arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    question: 'QuestionRelationFilter'
    questionId: Union[_str, 'types.StringFilter']
    choice: 'ChoiceRelationFilter'
    choiceId: Union[_str, 'types.StringFilter']
    profile: 'ProfileRelationFilter'
    profileId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['AnswerWhereInputRecursive1', List['AnswerWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['AnswerWhereInputRecursive1']
    OR: List['AnswerWhereInputRecursive1']
    NOT: List['AnswerWhereInputRecursive1']


class AnswerWhereInputRecursive1(TypedDict, total=False):
    """Answer arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    question: 'QuestionRelationFilter'
    questionId: Union[_str, 'types.StringFilter']
    choice: 'ChoiceRelationFilter'
    choiceId: Union[_str, 'types.StringFilter']
    profile: 'ProfileRelationFilter'
    profileId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['AnswerWhereInputRecursive2', List['AnswerWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['AnswerWhereInputRecursive2']
    OR: List['AnswerWhereInputRecursive2']
    NOT: List['AnswerWhereInputRecursive2']


class AnswerWhereInputRecursive2(TypedDict, total=False):
    """Answer arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    question: 'QuestionRelationFilter'
    questionId: Union[_str, 'types.StringFilter']
    choice: 'ChoiceRelationFilter'
    choiceId: Union[_str, 'types.StringFilter']
    profile: 'ProfileRelationFilter'
    profileId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['AnswerWhereInputRecursive3', List['AnswerWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['AnswerWhereInputRecursive3']
    OR: List['AnswerWhereInputRecursive3']
    NOT: List['AnswerWhereInputRecursive3']


class AnswerWhereInputRecursive3(TypedDict, total=False):
    """Answer arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    question: 'QuestionRelationFilter'
    questionId: Union[_str, 'types.StringFilter']
    choice: 'ChoiceRelationFilter'
    choiceId: Union[_str, 'types.StringFilter']
    profile: 'ProfileRelationFilter'
    profileId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['AnswerWhereInputRecursive4', List['AnswerWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['AnswerWhereInputRecursive4']
    OR: List['AnswerWhereInputRecursive4']
    NOT: List['AnswerWhereInputRecursive4']


class AnswerWhereInputRecursive4(TypedDict, total=False):
    """Answer arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    question: 'QuestionRelationFilter'
    questionId: Union[_str, 'types.StringFilter']
    choice: 'ChoiceRelationFilter'
    choiceId: Union[_str, 'types.StringFilter']
    profile: 'ProfileRelationFilter'
    profileId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Answer types


    

class AnswerScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Answer arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    questionId: Union[_str, 'types.StringWithAggregatesFilter']
    choiceId: Union[_str, 'types.StringWithAggregatesFilter']
    profileId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AnswerScalarWhereWithAggregatesInputRecursive1']
    OR: List['AnswerScalarWhereWithAggregatesInputRecursive1']
    NOT: List['AnswerScalarWhereWithAggregatesInputRecursive1']


class AnswerScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Answer arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    questionId: Union[_str, 'types.StringWithAggregatesFilter']
    choiceId: Union[_str, 'types.StringWithAggregatesFilter']
    profileId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AnswerScalarWhereWithAggregatesInputRecursive2']
    OR: List['AnswerScalarWhereWithAggregatesInputRecursive2']
    NOT: List['AnswerScalarWhereWithAggregatesInputRecursive2']


class AnswerScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Answer arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    questionId: Union[_str, 'types.StringWithAggregatesFilter']
    choiceId: Union[_str, 'types.StringWithAggregatesFilter']
    profileId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AnswerScalarWhereWithAggregatesInputRecursive3']
    OR: List['AnswerScalarWhereWithAggregatesInputRecursive3']
    NOT: List['AnswerScalarWhereWithAggregatesInputRecursive3']


class AnswerScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Answer arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    questionId: Union[_str, 'types.StringWithAggregatesFilter']
    choiceId: Union[_str, 'types.StringWithAggregatesFilter']
    profileId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AnswerScalarWhereWithAggregatesInputRecursive4']
    OR: List['AnswerScalarWhereWithAggregatesInputRecursive4']
    NOT: List['AnswerScalarWhereWithAggregatesInputRecursive4']


class AnswerScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Answer arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    questionId: Union[_str, 'types.StringWithAggregatesFilter']
    choiceId: Union[_str, 'types.StringWithAggregatesFilter']
    profileId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class AnswerGroupByOutput(TypedDict, total=False):
    id: _str
    questionId: _str
    choiceId: _str
    profileId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'AnswerSumAggregateOutput'
    _avg: 'AnswerAvgAggregateOutput'
    _min: 'AnswerMinAggregateOutput'
    _max: 'AnswerMaxAggregateOutput'
    _count: 'AnswerCountAggregateOutput'


class AnswerAvgAggregateOutput(TypedDict, total=False):
    """Answer output for aggregating averages"""


class AnswerSumAggregateOutput(TypedDict, total=False):
    """Answer output for aggregating sums"""


class AnswerScalarAggregateOutput(TypedDict, total=False):
    """Answer output including scalar fields"""
    id: _str
    questionId: _str
    choiceId: _str
    profileId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


AnswerMinAggregateOutput = AnswerScalarAggregateOutput
AnswerMaxAggregateOutput = AnswerScalarAggregateOutput


class AnswerMaxAggregateInput(TypedDict, total=False):
    """Answer input for aggregating by max"""
    id: bool
    questionId: bool
    choiceId: bool
    profileId: bool
    createdAt: bool
    updatedAt: bool


class AnswerMinAggregateInput(TypedDict, total=False):
    """Answer input for aggregating by min"""
    id: bool
    questionId: bool
    choiceId: bool
    profileId: bool
    createdAt: bool
    updatedAt: bool


class AnswerNumberAggregateInput(TypedDict, total=False):
    """Answer input for aggregating numbers"""


AnswerAvgAggregateInput = AnswerNumberAggregateInput
AnswerSumAggregateInput = AnswerNumberAggregateInput


AnswerCountAggregateInput = TypedDict(
    'AnswerCountAggregateInput',
    {
        'id': bool,
        'questionId': bool,
        'choiceId': bool,
        'profileId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

AnswerCountAggregateOutput = TypedDict(
    'AnswerCountAggregateOutput',
    {
        'id': int,
        'questionId': int,
        'choiceId': int,
        'profileId': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


AnswerKeys = Literal[
    'id',
    'question',
    'questionId',
    'choice',
    'choiceId',
    'profile',
    'profileId',
    'createdAt',
    'updatedAt',
]
AnswerScalarFieldKeys = Literal[
    'id',
    'questionId',
    'choiceId',
    'profileId',
    'createdAt',
    'updatedAt',
]
AnswerScalarFieldKeysT = TypeVar('AnswerScalarFieldKeysT', bound=AnswerScalarFieldKeys)

AnswerRelationalFieldKeys = Literal[
        'question',
        'choice',
        'profile',
    ]

# Profile types

class ProfileOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Profile create method"""
    userId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    maxQuestion: Optional[_int]
    answers: 'AnswerCreateManyNestedWithoutRelationsInput'
    results: 'ResultCreateManyNestedWithoutRelationsInput'


class ProfileCreateInput(ProfileOptionalCreateInput):
    """Required arguments to the Profile create method"""
    ageGroup: _str
    education: _str
    gender: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ProfileOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Profile create method, without relations"""
    userId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    maxQuestion: Optional[_int]


class ProfileCreateWithoutRelationsInput(ProfileOptionalCreateWithoutRelationsInput):
    """Required arguments to the Profile create method, without relations"""
    ageGroup: _str
    education: _str
    gender: _str

class ProfileConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ProfileCreateWithoutRelationsInput'
    where: 'ProfileWhereUniqueInput'

class ProfileCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ProfileCreateWithoutRelationsInput'
    connect: 'ProfileWhereUniqueInput'
    connect_or_create: 'ProfileConnectOrCreateWithoutRelationsInput'


class ProfileCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ProfileCreateWithoutRelationsInput', List['ProfileCreateWithoutRelationsInput']]
    connect: Union['ProfileWhereUniqueInput', List['ProfileWhereUniqueInput']]
    connect_or_create: Union['ProfileConnectOrCreateWithoutRelationsInput', List['ProfileConnectOrCreateWithoutRelationsInput']]

_ProfileWhereUnique_userId_Input = TypedDict(
    '_ProfileWhereUnique_userId_Input',
    {
        'userId': '_str',
    },
    total=True
)

ProfileWhereUniqueInput = _ProfileWhereUnique_userId_Input


class ProfileUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    userId: _str
    ageGroup: _str
    education: _str
    gender: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    maxQuestion: Optional[Union[AtomicIntInput, _int]]
    answers: 'AnswerUpdateManyWithoutRelationsInput'
    results: 'ResultUpdateManyWithoutRelationsInput'


class ProfileUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    userId: _str
    ageGroup: _str
    education: _str
    gender: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    maxQuestion: Optional[Union[AtomicIntInput, _int]]


class ProfileUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ProfileCreateWithoutRelationsInput']
    connect: List['ProfileWhereUniqueInput']
    connect_or_create: List['ProfileConnectOrCreateWithoutRelationsInput']
    set: List['ProfileWhereUniqueInput']
    disconnect: List['ProfileWhereUniqueInput']
    delete: List['ProfileWhereUniqueInput']

    # TODO
    # update: List['ProfileUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ProfileUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ProfileScalarWhereInput']
    # upsert: List['ProfileUpserteWithWhereUniqueWithoutRelationsInput']


class ProfileUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ProfileCreateWithoutRelationsInput'
    connect: 'ProfileWhereUniqueInput'
    connect_or_create: 'ProfileConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ProfileUpdateInput'
    # upsert: 'ProfileUpsertWithoutRelationsInput'


class ProfileUpsertInput(TypedDict):
    create: 'ProfileCreateInput'
    update: 'ProfileUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Profile_userId_OrderByInput = TypedDict(
    '_Profile_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Profile_ageGroup_OrderByInput = TypedDict(
    '_Profile_ageGroup_OrderByInput',
    {
        'ageGroup': 'SortOrder',
    },
    total=True
)

_Profile_education_OrderByInput = TypedDict(
    '_Profile_education_OrderByInput',
    {
        'education': 'SortOrder',
    },
    total=True
)

_Profile_gender_OrderByInput = TypedDict(
    '_Profile_gender_OrderByInput',
    {
        'gender': 'SortOrder',
    },
    total=True
)

_Profile_createdAt_OrderByInput = TypedDict(
    '_Profile_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Profile_updatedAt_OrderByInput = TypedDict(
    '_Profile_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Profile_maxQuestion_OrderByInput = TypedDict(
    '_Profile_maxQuestion_OrderByInput',
    {
        'maxQuestion': 'SortOrder',
    },
    total=True
)

_Profile_RelevanceInner = TypedDict(
    '_Profile_RelevanceInner',
    {
        'fields': 'List[ProfileScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Profile_RelevanceOrderByInput = TypedDict(
    '_Profile_RelevanceOrderByInput',
    {
        '_relevance': '_Profile_RelevanceInner',
    },
    total=True
)

ProfileOrderByInput = Union[
    '_Profile_userId_OrderByInput',
    '_Profile_ageGroup_OrderByInput',
    '_Profile_education_OrderByInput',
    '_Profile_gender_OrderByInput',
    '_Profile_createdAt_OrderByInput',
    '_Profile_updatedAt_OrderByInput',
    '_Profile_maxQuestion_OrderByInput',
    '_Profile_RelevanceOrderByInput',
]



# recursive Profile types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ProfileRelationFilter = TypedDict(
    'ProfileRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ProfileListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ProfileInclude(TypedDict, total=False):
    """Profile relational arguments"""
    answers: Union[bool, 'FindManyAnswerArgsFromProfile']
    results: Union[bool, 'FindManyResultArgsFromProfile']


    

class QuestionIncludeFromProfile(TypedDict, total=False):
    """Relational arguments for Profile"""
    choices: Union[bool, 'FindManyChoiceArgsFromProfileRecursive1']
    answers: Union[bool, 'FindManyAnswerArgsFromProfileRecursive1']


class QuestionIncludeFromProfileRecursive1(TypedDict, total=False):
    """Relational arguments for Profile"""
    choices: Union[bool, 'FindManyChoiceArgsFromProfileRecursive2']
    answers: Union[bool, 'FindManyAnswerArgsFromProfileRecursive2']


class QuestionIncludeFromProfileRecursive2(TypedDict, total=False):
    """Relational arguments for Profile"""
    choices: Union[bool, 'FindManyChoiceArgsFromProfileRecursive3']
    answers: Union[bool, 'FindManyAnswerArgsFromProfileRecursive3']


class QuestionIncludeFromProfileRecursive3(TypedDict, total=False):
    """Relational arguments for Profile"""
    choices: Union[bool, 'FindManyChoiceArgsFromProfileRecursive4']
    answers: Union[bool, 'FindManyAnswerArgsFromProfileRecursive4']


class QuestionIncludeFromProfileRecursive4(TypedDict, total=False):
    """Relational arguments for Profile"""

    

class QuestionArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'QuestionIncludeFromQuestionRecursive1'


class QuestionArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'QuestionIncludeFromQuestionRecursive2'


class QuestionArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'QuestionIncludeFromQuestionRecursive3'


class QuestionArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'QuestionIncludeFromQuestionRecursive4'


class QuestionArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    
    

class FindManyQuestionArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive1'


class FindManyQuestionArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive2'


class FindManyQuestionArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive3'


class FindManyQuestionArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive4'


class FindManyQuestionArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    
    

class ChoiceIncludeFromProfile(TypedDict, total=False):
    """Relational arguments for Profile"""
    question: Union[bool, 'QuestionArgsFromProfileRecursive1']
    pickedAnswers: Union[bool, 'FindManyAnswerArgsFromProfileRecursive1']


class ChoiceIncludeFromProfileRecursive1(TypedDict, total=False):
    """Relational arguments for Profile"""
    question: Union[bool, 'QuestionArgsFromProfileRecursive2']
    pickedAnswers: Union[bool, 'FindManyAnswerArgsFromProfileRecursive2']


class ChoiceIncludeFromProfileRecursive2(TypedDict, total=False):
    """Relational arguments for Profile"""
    question: Union[bool, 'QuestionArgsFromProfileRecursive3']
    pickedAnswers: Union[bool, 'FindManyAnswerArgsFromProfileRecursive3']


class ChoiceIncludeFromProfileRecursive3(TypedDict, total=False):
    """Relational arguments for Profile"""
    question: Union[bool, 'QuestionArgsFromProfileRecursive4']
    pickedAnswers: Union[bool, 'FindManyAnswerArgsFromProfileRecursive4']


class ChoiceIncludeFromProfileRecursive4(TypedDict, total=False):
    """Relational arguments for Profile"""

    

class ChoiceArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'ChoiceIncludeFromChoiceRecursive1'


class ChoiceArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'ChoiceIncludeFromChoiceRecursive2'


class ChoiceArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'ChoiceIncludeFromChoiceRecursive3'


class ChoiceArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'ChoiceIncludeFromChoiceRecursive4'


class ChoiceArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    
    

class FindManyChoiceArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ChoiceOrderByInput', List['ChoiceOrderByInput']]
    where: 'ChoiceWhereInput'
    cursor: 'ChoiceWhereUniqueInput'
    distinct: List['ChoiceScalarFieldKeys']
    include: 'ChoiceIncludeFromChoiceRecursive1'


class FindManyChoiceArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ChoiceOrderByInput', List['ChoiceOrderByInput']]
    where: 'ChoiceWhereInput'
    cursor: 'ChoiceWhereUniqueInput'
    distinct: List['ChoiceScalarFieldKeys']
    include: 'ChoiceIncludeFromChoiceRecursive2'


class FindManyChoiceArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ChoiceOrderByInput', List['ChoiceOrderByInput']]
    where: 'ChoiceWhereInput'
    cursor: 'ChoiceWhereUniqueInput'
    distinct: List['ChoiceScalarFieldKeys']
    include: 'ChoiceIncludeFromChoiceRecursive3'


class FindManyChoiceArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ChoiceOrderByInput', List['ChoiceOrderByInput']]
    where: 'ChoiceWhereInput'
    cursor: 'ChoiceWhereUniqueInput'
    distinct: List['ChoiceScalarFieldKeys']
    include: 'ChoiceIncludeFromChoiceRecursive4'


class FindManyChoiceArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ChoiceOrderByInput', List['ChoiceOrderByInput']]
    where: 'ChoiceWhereInput'
    cursor: 'ChoiceWhereUniqueInput'
    distinct: List['ChoiceScalarFieldKeys']
    
    

class AnswerIncludeFromProfile(TypedDict, total=False):
    """Relational arguments for Profile"""
    question: Union[bool, 'QuestionArgsFromProfileRecursive1']
    choice: Union[bool, 'ChoiceArgsFromProfileRecursive1']
    profile: Union[bool, 'ProfileArgsFromProfileRecursive1']


class AnswerIncludeFromProfileRecursive1(TypedDict, total=False):
    """Relational arguments for Profile"""
    question: Union[bool, 'QuestionArgsFromProfileRecursive2']
    choice: Union[bool, 'ChoiceArgsFromProfileRecursive2']
    profile: Union[bool, 'ProfileArgsFromProfileRecursive2']


class AnswerIncludeFromProfileRecursive2(TypedDict, total=False):
    """Relational arguments for Profile"""
    question: Union[bool, 'QuestionArgsFromProfileRecursive3']
    choice: Union[bool, 'ChoiceArgsFromProfileRecursive3']
    profile: Union[bool, 'ProfileArgsFromProfileRecursive3']


class AnswerIncludeFromProfileRecursive3(TypedDict, total=False):
    """Relational arguments for Profile"""
    question: Union[bool, 'QuestionArgsFromProfileRecursive4']
    choice: Union[bool, 'ChoiceArgsFromProfileRecursive4']
    profile: Union[bool, 'ProfileArgsFromProfileRecursive4']


class AnswerIncludeFromProfileRecursive4(TypedDict, total=False):
    """Relational arguments for Profile"""

    

class AnswerArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'AnswerIncludeFromAnswerRecursive1'


class AnswerArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'AnswerIncludeFromAnswerRecursive2'


class AnswerArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'AnswerIncludeFromAnswerRecursive3'


class AnswerArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'AnswerIncludeFromAnswerRecursive4'


class AnswerArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    
    

class FindManyAnswerArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    include: 'AnswerIncludeFromAnswerRecursive1'


class FindManyAnswerArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    include: 'AnswerIncludeFromAnswerRecursive2'


class FindManyAnswerArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    include: 'AnswerIncludeFromAnswerRecursive3'


class FindManyAnswerArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    include: 'AnswerIncludeFromAnswerRecursive4'


class FindManyAnswerArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    
    

class ProfileIncludeFromProfile(TypedDict, total=False):
    """Relational arguments for Profile"""
    answers: Union[bool, 'FindManyAnswerArgsFromProfileRecursive1']
    results: Union[bool, 'FindManyResultArgsFromProfileRecursive1']


class ProfileIncludeFromProfileRecursive1(TypedDict, total=False):
    """Relational arguments for Profile"""
    answers: Union[bool, 'FindManyAnswerArgsFromProfileRecursive2']
    results: Union[bool, 'FindManyResultArgsFromProfileRecursive2']


class ProfileIncludeFromProfileRecursive2(TypedDict, total=False):
    """Relational arguments for Profile"""
    answers: Union[bool, 'FindManyAnswerArgsFromProfileRecursive3']
    results: Union[bool, 'FindManyResultArgsFromProfileRecursive3']


class ProfileIncludeFromProfileRecursive3(TypedDict, total=False):
    """Relational arguments for Profile"""
    answers: Union[bool, 'FindManyAnswerArgsFromProfileRecursive4']
    results: Union[bool, 'FindManyResultArgsFromProfileRecursive4']


class ProfileIncludeFromProfileRecursive4(TypedDict, total=False):
    """Relational arguments for Profile"""

    

class ProfileArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'ProfileIncludeFromProfileRecursive1'


class ProfileArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'ProfileIncludeFromProfileRecursive2'


class ProfileArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'ProfileIncludeFromProfileRecursive3'


class ProfileArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'ProfileIncludeFromProfileRecursive4'


class ProfileArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    
    

class FindManyProfileArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive1'


class FindManyProfileArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive2'


class FindManyProfileArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive3'


class FindManyProfileArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive4'


class FindManyProfileArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    
    

class ResultIncludeFromProfile(TypedDict, total=False):
    """Relational arguments for Profile"""
    profile: Union[bool, 'ProfileArgsFromProfileRecursive1']


class ResultIncludeFromProfileRecursive1(TypedDict, total=False):
    """Relational arguments for Profile"""
    profile: Union[bool, 'ProfileArgsFromProfileRecursive2']


class ResultIncludeFromProfileRecursive2(TypedDict, total=False):
    """Relational arguments for Profile"""
    profile: Union[bool, 'ProfileArgsFromProfileRecursive3']


class ResultIncludeFromProfileRecursive3(TypedDict, total=False):
    """Relational arguments for Profile"""
    profile: Union[bool, 'ProfileArgsFromProfileRecursive4']


class ResultIncludeFromProfileRecursive4(TypedDict, total=False):
    """Relational arguments for Profile"""

    

class ResultArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'ResultIncludeFromResultRecursive1'


class ResultArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'ResultIncludeFromResultRecursive2'


class ResultArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'ResultIncludeFromResultRecursive3'


class ResultArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'ResultIncludeFromResultRecursive4'


class ResultArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    
    

class FindManyResultArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ResultOrderByInput', List['ResultOrderByInput']]
    where: 'ResultWhereInput'
    cursor: 'ResultWhereUniqueInput'
    distinct: List['ResultScalarFieldKeys']
    include: 'ResultIncludeFromResultRecursive1'


class FindManyResultArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ResultOrderByInput', List['ResultOrderByInput']]
    where: 'ResultWhereInput'
    cursor: 'ResultWhereUniqueInput'
    distinct: List['ResultScalarFieldKeys']
    include: 'ResultIncludeFromResultRecursive2'


class FindManyResultArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ResultOrderByInput', List['ResultOrderByInput']]
    where: 'ResultWhereInput'
    cursor: 'ResultWhereUniqueInput'
    distinct: List['ResultScalarFieldKeys']
    include: 'ResultIncludeFromResultRecursive3'


class FindManyResultArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ResultOrderByInput', List['ResultOrderByInput']]
    where: 'ResultWhereInput'
    cursor: 'ResultWhereUniqueInput'
    distinct: List['ResultScalarFieldKeys']
    include: 'ResultIncludeFromResultRecursive4'


class FindManyResultArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ResultOrderByInput', List['ResultOrderByInput']]
    where: 'ResultWhereInput'
    cursor: 'ResultWhereUniqueInput'
    distinct: List['ResultScalarFieldKeys']
    


FindManyProfileArgs = FindManyProfileArgsFromProfile
FindFirstProfileArgs = FindManyProfileArgsFromProfile


    

class ProfileWhereInput(TypedDict, total=False):
    """Profile arguments for searching"""
    userId: Union[_str, 'types.StringFilter']
    ageGroup: Union[_str, 'types.StringFilter']
    education: Union[_str, 'types.StringFilter']
    gender: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    maxQuestion: Union[None, _int, 'types.IntFilter']
    answers: 'AnswerListRelationFilter'
    results: 'ResultListRelationFilter'

    # should be noted that AND and NOT should be Union['ProfileWhereInputRecursive1', List['ProfileWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ProfileWhereInputRecursive1']
    OR: List['ProfileWhereInputRecursive1']
    NOT: List['ProfileWhereInputRecursive1']


class ProfileWhereInputRecursive1(TypedDict, total=False):
    """Profile arguments for searching"""
    userId: Union[_str, 'types.StringFilter']
    ageGroup: Union[_str, 'types.StringFilter']
    education: Union[_str, 'types.StringFilter']
    gender: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    maxQuestion: Union[None, _int, 'types.IntFilter']
    answers: 'AnswerListRelationFilter'
    results: 'ResultListRelationFilter'

    # should be noted that AND and NOT should be Union['ProfileWhereInputRecursive2', List['ProfileWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ProfileWhereInputRecursive2']
    OR: List['ProfileWhereInputRecursive2']
    NOT: List['ProfileWhereInputRecursive2']


class ProfileWhereInputRecursive2(TypedDict, total=False):
    """Profile arguments for searching"""
    userId: Union[_str, 'types.StringFilter']
    ageGroup: Union[_str, 'types.StringFilter']
    education: Union[_str, 'types.StringFilter']
    gender: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    maxQuestion: Union[None, _int, 'types.IntFilter']
    answers: 'AnswerListRelationFilter'
    results: 'ResultListRelationFilter'

    # should be noted that AND and NOT should be Union['ProfileWhereInputRecursive3', List['ProfileWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ProfileWhereInputRecursive3']
    OR: List['ProfileWhereInputRecursive3']
    NOT: List['ProfileWhereInputRecursive3']


class ProfileWhereInputRecursive3(TypedDict, total=False):
    """Profile arguments for searching"""
    userId: Union[_str, 'types.StringFilter']
    ageGroup: Union[_str, 'types.StringFilter']
    education: Union[_str, 'types.StringFilter']
    gender: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    maxQuestion: Union[None, _int, 'types.IntFilter']
    answers: 'AnswerListRelationFilter'
    results: 'ResultListRelationFilter'

    # should be noted that AND and NOT should be Union['ProfileWhereInputRecursive4', List['ProfileWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ProfileWhereInputRecursive4']
    OR: List['ProfileWhereInputRecursive4']
    NOT: List['ProfileWhereInputRecursive4']


class ProfileWhereInputRecursive4(TypedDict, total=False):
    """Profile arguments for searching"""
    userId: Union[_str, 'types.StringFilter']
    ageGroup: Union[_str, 'types.StringFilter']
    education: Union[_str, 'types.StringFilter']
    gender: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    maxQuestion: Union[None, _int, 'types.IntFilter']
    answers: 'AnswerListRelationFilter'
    results: 'ResultListRelationFilter'



# aggregate Profile types


    

class ProfileScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Profile arguments for searching"""
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    ageGroup: Union[_str, 'types.StringWithAggregatesFilter']
    education: Union[_str, 'types.StringWithAggregatesFilter']
    gender: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    maxQuestion: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ProfileScalarWhereWithAggregatesInputRecursive1']
    OR: List['ProfileScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ProfileScalarWhereWithAggregatesInputRecursive1']


class ProfileScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Profile arguments for searching"""
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    ageGroup: Union[_str, 'types.StringWithAggregatesFilter']
    education: Union[_str, 'types.StringWithAggregatesFilter']
    gender: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    maxQuestion: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ProfileScalarWhereWithAggregatesInputRecursive2']
    OR: List['ProfileScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ProfileScalarWhereWithAggregatesInputRecursive2']


class ProfileScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Profile arguments for searching"""
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    ageGroup: Union[_str, 'types.StringWithAggregatesFilter']
    education: Union[_str, 'types.StringWithAggregatesFilter']
    gender: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    maxQuestion: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ProfileScalarWhereWithAggregatesInputRecursive3']
    OR: List['ProfileScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ProfileScalarWhereWithAggregatesInputRecursive3']


class ProfileScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Profile arguments for searching"""
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    ageGroup: Union[_str, 'types.StringWithAggregatesFilter']
    education: Union[_str, 'types.StringWithAggregatesFilter']
    gender: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    maxQuestion: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ProfileScalarWhereWithAggregatesInputRecursive4']
    OR: List['ProfileScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ProfileScalarWhereWithAggregatesInputRecursive4']


class ProfileScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Profile arguments for searching"""
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    ageGroup: Union[_str, 'types.StringWithAggregatesFilter']
    education: Union[_str, 'types.StringWithAggregatesFilter']
    gender: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    maxQuestion: Union[_int, 'types.IntWithAggregatesFilter']



class ProfileGroupByOutput(TypedDict, total=False):
    userId: _str
    ageGroup: _str
    education: _str
    gender: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    maxQuestion: _int
    _sum: 'ProfileSumAggregateOutput'
    _avg: 'ProfileAvgAggregateOutput'
    _min: 'ProfileMinAggregateOutput'
    _max: 'ProfileMaxAggregateOutput'
    _count: 'ProfileCountAggregateOutput'


class ProfileAvgAggregateOutput(TypedDict, total=False):
    """Profile output for aggregating averages"""
    maxQuestion: float


class ProfileSumAggregateOutput(TypedDict, total=False):
    """Profile output for aggregating sums"""
    maxQuestion: _int


class ProfileScalarAggregateOutput(TypedDict, total=False):
    """Profile output including scalar fields"""
    userId: _str
    ageGroup: _str
    education: _str
    gender: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    maxQuestion: _int


ProfileMinAggregateOutput = ProfileScalarAggregateOutput
ProfileMaxAggregateOutput = ProfileScalarAggregateOutput


class ProfileMaxAggregateInput(TypedDict, total=False):
    """Profile input for aggregating by max"""
    userId: bool
    ageGroup: bool
    education: bool
    gender: bool
    createdAt: bool
    updatedAt: bool
    maxQuestion: bool


class ProfileMinAggregateInput(TypedDict, total=False):
    """Profile input for aggregating by min"""
    userId: bool
    ageGroup: bool
    education: bool
    gender: bool
    createdAt: bool
    updatedAt: bool
    maxQuestion: bool


class ProfileNumberAggregateInput(TypedDict, total=False):
    """Profile input for aggregating numbers"""
    maxQuestion: bool


ProfileAvgAggregateInput = ProfileNumberAggregateInput
ProfileSumAggregateInput = ProfileNumberAggregateInput


ProfileCountAggregateInput = TypedDict(
    'ProfileCountAggregateInput',
    {
        'userId': bool,
        'ageGroup': bool,
        'education': bool,
        'gender': bool,
        'createdAt': bool,
        'updatedAt': bool,
        'maxQuestion': bool,
        '_all': bool,
    },
    total=False,
)

ProfileCountAggregateOutput = TypedDict(
    'ProfileCountAggregateOutput',
    {
        'userId': int,
        'ageGroup': int,
        'education': int,
        'gender': int,
        'createdAt': int,
        'updatedAt': int,
        'maxQuestion': int,
        '_all': int,
    },
    total=False,
)


ProfileKeys = Literal[
    'userId',
    'ageGroup',
    'education',
    'gender',
    'createdAt',
    'updatedAt',
    'maxQuestion',
    'answers',
    'results',
]
ProfileScalarFieldKeys = Literal[
    'userId',
    'ageGroup',
    'education',
    'gender',
    'createdAt',
    'updatedAt',
    'maxQuestion',
]
ProfileScalarFieldKeysT = TypeVar('ProfileScalarFieldKeysT', bound=ProfileScalarFieldKeys)

ProfileRelationalFieldKeys = Literal[
        'answers',
        'results',
    ]

# Result types

class ResultOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Result create method"""
    id: _str
    userId: _str
    profile: 'ProfileCreateNestedWithoutRelationsInput'
    advantages: List[_str]
    disadvantages: List[_str]
    tags: List[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ResultCreateInput(ResultOptionalCreateInput):
    """Required arguments to the Result create method"""
    result: _str
    points: _int
    description: _str
    match_description: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ResultOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Result create method, without relations"""
    id: _str
    userId: _str
    advantages: List[_str]
    disadvantages: List[_str]
    tags: List[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ResultCreateWithoutRelationsInput(ResultOptionalCreateWithoutRelationsInput):
    """Required arguments to the Result create method, without relations"""
    result: _str
    points: _int
    description: _str
    match_description: _str

class ResultConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ResultCreateWithoutRelationsInput'
    where: 'ResultWhereUniqueInput'

class ResultCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ResultCreateWithoutRelationsInput'
    connect: 'ResultWhereUniqueInput'
    connect_or_create: 'ResultConnectOrCreateWithoutRelationsInput'


class ResultCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ResultCreateWithoutRelationsInput', List['ResultCreateWithoutRelationsInput']]
    connect: Union['ResultWhereUniqueInput', List['ResultWhereUniqueInput']]
    connect_or_create: Union['ResultConnectOrCreateWithoutRelationsInput', List['ResultConnectOrCreateWithoutRelationsInput']]

_ResultWhereUnique_id_Input = TypedDict(
    '_ResultWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

ResultWhereUniqueInput = _ResultWhereUnique_id_Input


class ResultUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    profile: 'ProfileUpdateOneWithoutRelationsInput'
    result: _str
    points: Union[AtomicIntInput, _int]
    description: _str
    match_description: _str
    advantages: 'types.StringListUpdate'
    disadvantages: 'types.StringListUpdate'
    tags: 'types.StringListUpdate'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ResultUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    result: _str
    points: Union[AtomicIntInput, _int]
    description: _str
    match_description: _str
    advantages: 'types.StringListUpdate'
    disadvantages: 'types.StringListUpdate'
    tags: 'types.StringListUpdate'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ResultUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ResultCreateWithoutRelationsInput']
    connect: List['ResultWhereUniqueInput']
    connect_or_create: List['ResultConnectOrCreateWithoutRelationsInput']
    set: List['ResultWhereUniqueInput']
    disconnect: List['ResultWhereUniqueInput']
    delete: List['ResultWhereUniqueInput']

    # TODO
    # update: List['ResultUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ResultUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ResultScalarWhereInput']
    # upsert: List['ResultUpserteWithWhereUniqueWithoutRelationsInput']


class ResultUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ResultCreateWithoutRelationsInput'
    connect: 'ResultWhereUniqueInput'
    connect_or_create: 'ResultConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ResultUpdateInput'
    # upsert: 'ResultUpsertWithoutRelationsInput'


class ResultUpsertInput(TypedDict):
    create: 'ResultCreateInput'
    update: 'ResultUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Result_id_OrderByInput = TypedDict(
    '_Result_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Result_userId_OrderByInput = TypedDict(
    '_Result_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Result_result_OrderByInput = TypedDict(
    '_Result_result_OrderByInput',
    {
        'result': 'SortOrder',
    },
    total=True
)

_Result_points_OrderByInput = TypedDict(
    '_Result_points_OrderByInput',
    {
        'points': 'SortOrder',
    },
    total=True
)

_Result_description_OrderByInput = TypedDict(
    '_Result_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Result_match_description_OrderByInput = TypedDict(
    '_Result_match_description_OrderByInput',
    {
        'match_description': 'SortOrder',
    },
    total=True
)

_Result_advantages_OrderByInput = TypedDict(
    '_Result_advantages_OrderByInput',
    {
        'advantages': 'SortOrder',
    },
    total=True
)

_Result_disadvantages_OrderByInput = TypedDict(
    '_Result_disadvantages_OrderByInput',
    {
        'disadvantages': 'SortOrder',
    },
    total=True
)

_Result_tags_OrderByInput = TypedDict(
    '_Result_tags_OrderByInput',
    {
        'tags': 'SortOrder',
    },
    total=True
)

_Result_createdAt_OrderByInput = TypedDict(
    '_Result_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Result_updatedAt_OrderByInput = TypedDict(
    '_Result_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Result_RelevanceInner = TypedDict(
    '_Result_RelevanceInner',
    {
        'fields': 'List[ResultScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Result_RelevanceOrderByInput = TypedDict(
    '_Result_RelevanceOrderByInput',
    {
        '_relevance': '_Result_RelevanceInner',
    },
    total=True
)

ResultOrderByInput = Union[
    '_Result_id_OrderByInput',
    '_Result_userId_OrderByInput',
    '_Result_result_OrderByInput',
    '_Result_points_OrderByInput',
    '_Result_description_OrderByInput',
    '_Result_match_description_OrderByInput',
    '_Result_advantages_OrderByInput',
    '_Result_disadvantages_OrderByInput',
    '_Result_tags_OrderByInput',
    '_Result_createdAt_OrderByInput',
    '_Result_updatedAt_OrderByInput',
    '_Result_RelevanceOrderByInput',
]



# recursive Result types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ResultRelationFilter = TypedDict(
    'ResultRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ResultListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ResultInclude(TypedDict, total=False):
    """Result relational arguments"""
    profile: Union[bool, 'ProfileArgsFromResult']


    

class QuestionIncludeFromResult(TypedDict, total=False):
    """Relational arguments for Result"""
    choices: Union[bool, 'FindManyChoiceArgsFromResultRecursive1']
    answers: Union[bool, 'FindManyAnswerArgsFromResultRecursive1']


class QuestionIncludeFromResultRecursive1(TypedDict, total=False):
    """Relational arguments for Result"""
    choices: Union[bool, 'FindManyChoiceArgsFromResultRecursive2']
    answers: Union[bool, 'FindManyAnswerArgsFromResultRecursive2']


class QuestionIncludeFromResultRecursive2(TypedDict, total=False):
    """Relational arguments for Result"""
    choices: Union[bool, 'FindManyChoiceArgsFromResultRecursive3']
    answers: Union[bool, 'FindManyAnswerArgsFromResultRecursive3']


class QuestionIncludeFromResultRecursive3(TypedDict, total=False):
    """Relational arguments for Result"""
    choices: Union[bool, 'FindManyChoiceArgsFromResultRecursive4']
    answers: Union[bool, 'FindManyAnswerArgsFromResultRecursive4']


class QuestionIncludeFromResultRecursive4(TypedDict, total=False):
    """Relational arguments for Result"""

    

class QuestionArgsFromResult(TypedDict, total=False):
    """Arguments for Result"""
    include: 'QuestionIncludeFromQuestionRecursive1'


class QuestionArgsFromResultRecursive1(TypedDict, total=False):
    """Arguments for Result"""
    include: 'QuestionIncludeFromQuestionRecursive2'


class QuestionArgsFromResultRecursive2(TypedDict, total=False):
    """Arguments for Result"""
    include: 'QuestionIncludeFromQuestionRecursive3'


class QuestionArgsFromResultRecursive3(TypedDict, total=False):
    """Arguments for Result"""
    include: 'QuestionIncludeFromQuestionRecursive4'


class QuestionArgsFromResultRecursive4(TypedDict, total=False):
    """Arguments for Result"""
    
    

class FindManyQuestionArgsFromResult(TypedDict, total=False):
    """Arguments for Result"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive1'


class FindManyQuestionArgsFromResultRecursive1(TypedDict, total=False):
    """Arguments for Result"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive2'


class FindManyQuestionArgsFromResultRecursive2(TypedDict, total=False):
    """Arguments for Result"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive3'


class FindManyQuestionArgsFromResultRecursive3(TypedDict, total=False):
    """Arguments for Result"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive4'


class FindManyQuestionArgsFromResultRecursive4(TypedDict, total=False):
    """Arguments for Result"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    
    

class ChoiceIncludeFromResult(TypedDict, total=False):
    """Relational arguments for Result"""
    question: Union[bool, 'QuestionArgsFromResultRecursive1']
    pickedAnswers: Union[bool, 'FindManyAnswerArgsFromResultRecursive1']


class ChoiceIncludeFromResultRecursive1(TypedDict, total=False):
    """Relational arguments for Result"""
    question: Union[bool, 'QuestionArgsFromResultRecursive2']
    pickedAnswers: Union[bool, 'FindManyAnswerArgsFromResultRecursive2']


class ChoiceIncludeFromResultRecursive2(TypedDict, total=False):
    """Relational arguments for Result"""
    question: Union[bool, 'QuestionArgsFromResultRecursive3']
    pickedAnswers: Union[bool, 'FindManyAnswerArgsFromResultRecursive3']


class ChoiceIncludeFromResultRecursive3(TypedDict, total=False):
    """Relational arguments for Result"""
    question: Union[bool, 'QuestionArgsFromResultRecursive4']
    pickedAnswers: Union[bool, 'FindManyAnswerArgsFromResultRecursive4']


class ChoiceIncludeFromResultRecursive4(TypedDict, total=False):
    """Relational arguments for Result"""

    

class ChoiceArgsFromResult(TypedDict, total=False):
    """Arguments for Result"""
    include: 'ChoiceIncludeFromChoiceRecursive1'


class ChoiceArgsFromResultRecursive1(TypedDict, total=False):
    """Arguments for Result"""
    include: 'ChoiceIncludeFromChoiceRecursive2'


class ChoiceArgsFromResultRecursive2(TypedDict, total=False):
    """Arguments for Result"""
    include: 'ChoiceIncludeFromChoiceRecursive3'


class ChoiceArgsFromResultRecursive3(TypedDict, total=False):
    """Arguments for Result"""
    include: 'ChoiceIncludeFromChoiceRecursive4'


class ChoiceArgsFromResultRecursive4(TypedDict, total=False):
    """Arguments for Result"""
    
    

class FindManyChoiceArgsFromResult(TypedDict, total=False):
    """Arguments for Result"""
    take: int
    skip: int
    order_by: Union['ChoiceOrderByInput', List['ChoiceOrderByInput']]
    where: 'ChoiceWhereInput'
    cursor: 'ChoiceWhereUniqueInput'
    distinct: List['ChoiceScalarFieldKeys']
    include: 'ChoiceIncludeFromChoiceRecursive1'


class FindManyChoiceArgsFromResultRecursive1(TypedDict, total=False):
    """Arguments for Result"""
    take: int
    skip: int
    order_by: Union['ChoiceOrderByInput', List['ChoiceOrderByInput']]
    where: 'ChoiceWhereInput'
    cursor: 'ChoiceWhereUniqueInput'
    distinct: List['ChoiceScalarFieldKeys']
    include: 'ChoiceIncludeFromChoiceRecursive2'


class FindManyChoiceArgsFromResultRecursive2(TypedDict, total=False):
    """Arguments for Result"""
    take: int
    skip: int
    order_by: Union['ChoiceOrderByInput', List['ChoiceOrderByInput']]
    where: 'ChoiceWhereInput'
    cursor: 'ChoiceWhereUniqueInput'
    distinct: List['ChoiceScalarFieldKeys']
    include: 'ChoiceIncludeFromChoiceRecursive3'


class FindManyChoiceArgsFromResultRecursive3(TypedDict, total=False):
    """Arguments for Result"""
    take: int
    skip: int
    order_by: Union['ChoiceOrderByInput', List['ChoiceOrderByInput']]
    where: 'ChoiceWhereInput'
    cursor: 'ChoiceWhereUniqueInput'
    distinct: List['ChoiceScalarFieldKeys']
    include: 'ChoiceIncludeFromChoiceRecursive4'


class FindManyChoiceArgsFromResultRecursive4(TypedDict, total=False):
    """Arguments for Result"""
    take: int
    skip: int
    order_by: Union['ChoiceOrderByInput', List['ChoiceOrderByInput']]
    where: 'ChoiceWhereInput'
    cursor: 'ChoiceWhereUniqueInput'
    distinct: List['ChoiceScalarFieldKeys']
    
    

class AnswerIncludeFromResult(TypedDict, total=False):
    """Relational arguments for Result"""
    question: Union[bool, 'QuestionArgsFromResultRecursive1']
    choice: Union[bool, 'ChoiceArgsFromResultRecursive1']
    profile: Union[bool, 'ProfileArgsFromResultRecursive1']


class AnswerIncludeFromResultRecursive1(TypedDict, total=False):
    """Relational arguments for Result"""
    question: Union[bool, 'QuestionArgsFromResultRecursive2']
    choice: Union[bool, 'ChoiceArgsFromResultRecursive2']
    profile: Union[bool, 'ProfileArgsFromResultRecursive2']


class AnswerIncludeFromResultRecursive2(TypedDict, total=False):
    """Relational arguments for Result"""
    question: Union[bool, 'QuestionArgsFromResultRecursive3']
    choice: Union[bool, 'ChoiceArgsFromResultRecursive3']
    profile: Union[bool, 'ProfileArgsFromResultRecursive3']


class AnswerIncludeFromResultRecursive3(TypedDict, total=False):
    """Relational arguments for Result"""
    question: Union[bool, 'QuestionArgsFromResultRecursive4']
    choice: Union[bool, 'ChoiceArgsFromResultRecursive4']
    profile: Union[bool, 'ProfileArgsFromResultRecursive4']


class AnswerIncludeFromResultRecursive4(TypedDict, total=False):
    """Relational arguments for Result"""

    

class AnswerArgsFromResult(TypedDict, total=False):
    """Arguments for Result"""
    include: 'AnswerIncludeFromAnswerRecursive1'


class AnswerArgsFromResultRecursive1(TypedDict, total=False):
    """Arguments for Result"""
    include: 'AnswerIncludeFromAnswerRecursive2'


class AnswerArgsFromResultRecursive2(TypedDict, total=False):
    """Arguments for Result"""
    include: 'AnswerIncludeFromAnswerRecursive3'


class AnswerArgsFromResultRecursive3(TypedDict, total=False):
    """Arguments for Result"""
    include: 'AnswerIncludeFromAnswerRecursive4'


class AnswerArgsFromResultRecursive4(TypedDict, total=False):
    """Arguments for Result"""
    
    

class FindManyAnswerArgsFromResult(TypedDict, total=False):
    """Arguments for Result"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    include: 'AnswerIncludeFromAnswerRecursive1'


class FindManyAnswerArgsFromResultRecursive1(TypedDict, total=False):
    """Arguments for Result"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    include: 'AnswerIncludeFromAnswerRecursive2'


class FindManyAnswerArgsFromResultRecursive2(TypedDict, total=False):
    """Arguments for Result"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    include: 'AnswerIncludeFromAnswerRecursive3'


class FindManyAnswerArgsFromResultRecursive3(TypedDict, total=False):
    """Arguments for Result"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    include: 'AnswerIncludeFromAnswerRecursive4'


class FindManyAnswerArgsFromResultRecursive4(TypedDict, total=False):
    """Arguments for Result"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    
    

class ProfileIncludeFromResult(TypedDict, total=False):
    """Relational arguments for Result"""
    answers: Union[bool, 'FindManyAnswerArgsFromResultRecursive1']
    results: Union[bool, 'FindManyResultArgsFromResultRecursive1']


class ProfileIncludeFromResultRecursive1(TypedDict, total=False):
    """Relational arguments for Result"""
    answers: Union[bool, 'FindManyAnswerArgsFromResultRecursive2']
    results: Union[bool, 'FindManyResultArgsFromResultRecursive2']


class ProfileIncludeFromResultRecursive2(TypedDict, total=False):
    """Relational arguments for Result"""
    answers: Union[bool, 'FindManyAnswerArgsFromResultRecursive3']
    results: Union[bool, 'FindManyResultArgsFromResultRecursive3']


class ProfileIncludeFromResultRecursive3(TypedDict, total=False):
    """Relational arguments for Result"""
    answers: Union[bool, 'FindManyAnswerArgsFromResultRecursive4']
    results: Union[bool, 'FindManyResultArgsFromResultRecursive4']


class ProfileIncludeFromResultRecursive4(TypedDict, total=False):
    """Relational arguments for Result"""

    

class ProfileArgsFromResult(TypedDict, total=False):
    """Arguments for Result"""
    include: 'ProfileIncludeFromProfileRecursive1'


class ProfileArgsFromResultRecursive1(TypedDict, total=False):
    """Arguments for Result"""
    include: 'ProfileIncludeFromProfileRecursive2'


class ProfileArgsFromResultRecursive2(TypedDict, total=False):
    """Arguments for Result"""
    include: 'ProfileIncludeFromProfileRecursive3'


class ProfileArgsFromResultRecursive3(TypedDict, total=False):
    """Arguments for Result"""
    include: 'ProfileIncludeFromProfileRecursive4'


class ProfileArgsFromResultRecursive4(TypedDict, total=False):
    """Arguments for Result"""
    
    

class FindManyProfileArgsFromResult(TypedDict, total=False):
    """Arguments for Result"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive1'


class FindManyProfileArgsFromResultRecursive1(TypedDict, total=False):
    """Arguments for Result"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive2'


class FindManyProfileArgsFromResultRecursive2(TypedDict, total=False):
    """Arguments for Result"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive3'


class FindManyProfileArgsFromResultRecursive3(TypedDict, total=False):
    """Arguments for Result"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive4'


class FindManyProfileArgsFromResultRecursive4(TypedDict, total=False):
    """Arguments for Result"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    
    

class ResultIncludeFromResult(TypedDict, total=False):
    """Relational arguments for Result"""
    profile: Union[bool, 'ProfileArgsFromResultRecursive1']


class ResultIncludeFromResultRecursive1(TypedDict, total=False):
    """Relational arguments for Result"""
    profile: Union[bool, 'ProfileArgsFromResultRecursive2']


class ResultIncludeFromResultRecursive2(TypedDict, total=False):
    """Relational arguments for Result"""
    profile: Union[bool, 'ProfileArgsFromResultRecursive3']


class ResultIncludeFromResultRecursive3(TypedDict, total=False):
    """Relational arguments for Result"""
    profile: Union[bool, 'ProfileArgsFromResultRecursive4']


class ResultIncludeFromResultRecursive4(TypedDict, total=False):
    """Relational arguments for Result"""

    

class ResultArgsFromResult(TypedDict, total=False):
    """Arguments for Result"""
    include: 'ResultIncludeFromResultRecursive1'


class ResultArgsFromResultRecursive1(TypedDict, total=False):
    """Arguments for Result"""
    include: 'ResultIncludeFromResultRecursive2'


class ResultArgsFromResultRecursive2(TypedDict, total=False):
    """Arguments for Result"""
    include: 'ResultIncludeFromResultRecursive3'


class ResultArgsFromResultRecursive3(TypedDict, total=False):
    """Arguments for Result"""
    include: 'ResultIncludeFromResultRecursive4'


class ResultArgsFromResultRecursive4(TypedDict, total=False):
    """Arguments for Result"""
    
    

class FindManyResultArgsFromResult(TypedDict, total=False):
    """Arguments for Result"""
    take: int
    skip: int
    order_by: Union['ResultOrderByInput', List['ResultOrderByInput']]
    where: 'ResultWhereInput'
    cursor: 'ResultWhereUniqueInput'
    distinct: List['ResultScalarFieldKeys']
    include: 'ResultIncludeFromResultRecursive1'


class FindManyResultArgsFromResultRecursive1(TypedDict, total=False):
    """Arguments for Result"""
    take: int
    skip: int
    order_by: Union['ResultOrderByInput', List['ResultOrderByInput']]
    where: 'ResultWhereInput'
    cursor: 'ResultWhereUniqueInput'
    distinct: List['ResultScalarFieldKeys']
    include: 'ResultIncludeFromResultRecursive2'


class FindManyResultArgsFromResultRecursive2(TypedDict, total=False):
    """Arguments for Result"""
    take: int
    skip: int
    order_by: Union['ResultOrderByInput', List['ResultOrderByInput']]
    where: 'ResultWhereInput'
    cursor: 'ResultWhereUniqueInput'
    distinct: List['ResultScalarFieldKeys']
    include: 'ResultIncludeFromResultRecursive3'


class FindManyResultArgsFromResultRecursive3(TypedDict, total=False):
    """Arguments for Result"""
    take: int
    skip: int
    order_by: Union['ResultOrderByInput', List['ResultOrderByInput']]
    where: 'ResultWhereInput'
    cursor: 'ResultWhereUniqueInput'
    distinct: List['ResultScalarFieldKeys']
    include: 'ResultIncludeFromResultRecursive4'


class FindManyResultArgsFromResultRecursive4(TypedDict, total=False):
    """Arguments for Result"""
    take: int
    skip: int
    order_by: Union['ResultOrderByInput', List['ResultOrderByInput']]
    where: 'ResultWhereInput'
    cursor: 'ResultWhereUniqueInput'
    distinct: List['ResultScalarFieldKeys']
    


FindManyResultArgs = FindManyResultArgsFromResult
FindFirstResultArgs = FindManyResultArgsFromResult


    

class ResultWhereInput(TypedDict, total=False):
    """Result arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    profile: 'ProfileRelationFilter'
    result: Union[_str, 'types.StringFilter']
    points: Union[_int, 'types.IntFilter']
    description: Union[_str, 'types.StringFilter']
    match_description: Union[_str, 'types.StringFilter']
    advantages: 'types.StringListFilter'
    disadvantages: 'types.StringListFilter'
    tags: 'types.StringListFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ResultWhereInputRecursive1', List['ResultWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ResultWhereInputRecursive1']
    OR: List['ResultWhereInputRecursive1']
    NOT: List['ResultWhereInputRecursive1']


class ResultWhereInputRecursive1(TypedDict, total=False):
    """Result arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    profile: 'ProfileRelationFilter'
    result: Union[_str, 'types.StringFilter']
    points: Union[_int, 'types.IntFilter']
    description: Union[_str, 'types.StringFilter']
    match_description: Union[_str, 'types.StringFilter']
    advantages: 'types.StringListFilter'
    disadvantages: 'types.StringListFilter'
    tags: 'types.StringListFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ResultWhereInputRecursive2', List['ResultWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ResultWhereInputRecursive2']
    OR: List['ResultWhereInputRecursive2']
    NOT: List['ResultWhereInputRecursive2']


class ResultWhereInputRecursive2(TypedDict, total=False):
    """Result arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    profile: 'ProfileRelationFilter'
    result: Union[_str, 'types.StringFilter']
    points: Union[_int, 'types.IntFilter']
    description: Union[_str, 'types.StringFilter']
    match_description: Union[_str, 'types.StringFilter']
    advantages: 'types.StringListFilter'
    disadvantages: 'types.StringListFilter'
    tags: 'types.StringListFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ResultWhereInputRecursive3', List['ResultWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ResultWhereInputRecursive3']
    OR: List['ResultWhereInputRecursive3']
    NOT: List['ResultWhereInputRecursive3']


class ResultWhereInputRecursive3(TypedDict, total=False):
    """Result arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    profile: 'ProfileRelationFilter'
    result: Union[_str, 'types.StringFilter']
    points: Union[_int, 'types.IntFilter']
    description: Union[_str, 'types.StringFilter']
    match_description: Union[_str, 'types.StringFilter']
    advantages: 'types.StringListFilter'
    disadvantages: 'types.StringListFilter'
    tags: 'types.StringListFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ResultWhereInputRecursive4', List['ResultWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ResultWhereInputRecursive4']
    OR: List['ResultWhereInputRecursive4']
    NOT: List['ResultWhereInputRecursive4']


class ResultWhereInputRecursive4(TypedDict, total=False):
    """Result arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    profile: 'ProfileRelationFilter'
    result: Union[_str, 'types.StringFilter']
    points: Union[_int, 'types.IntFilter']
    description: Union[_str, 'types.StringFilter']
    match_description: Union[_str, 'types.StringFilter']
    advantages: 'types.StringListFilter'
    disadvantages: 'types.StringListFilter'
    tags: 'types.StringListFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Result types


    

class ResultScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Result arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    result: Union[_str, 'types.StringWithAggregatesFilter']
    points: Union[_int, 'types.IntWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    match_description: Union[_str, 'types.StringWithAggregatesFilter']
    advantages: Union[_str, 'types.StringWithAggregatesFilter']
    disadvantages: Union[_str, 'types.StringWithAggregatesFilter']
    tags: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ResultScalarWhereWithAggregatesInputRecursive1']
    OR: List['ResultScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ResultScalarWhereWithAggregatesInputRecursive1']


class ResultScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Result arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    result: Union[_str, 'types.StringWithAggregatesFilter']
    points: Union[_int, 'types.IntWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    match_description: Union[_str, 'types.StringWithAggregatesFilter']
    advantages: Union[_str, 'types.StringWithAggregatesFilter']
    disadvantages: Union[_str, 'types.StringWithAggregatesFilter']
    tags: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ResultScalarWhereWithAggregatesInputRecursive2']
    OR: List['ResultScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ResultScalarWhereWithAggregatesInputRecursive2']


class ResultScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Result arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    result: Union[_str, 'types.StringWithAggregatesFilter']
    points: Union[_int, 'types.IntWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    match_description: Union[_str, 'types.StringWithAggregatesFilter']
    advantages: Union[_str, 'types.StringWithAggregatesFilter']
    disadvantages: Union[_str, 'types.StringWithAggregatesFilter']
    tags: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ResultScalarWhereWithAggregatesInputRecursive3']
    OR: List['ResultScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ResultScalarWhereWithAggregatesInputRecursive3']


class ResultScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Result arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    result: Union[_str, 'types.StringWithAggregatesFilter']
    points: Union[_int, 'types.IntWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    match_description: Union[_str, 'types.StringWithAggregatesFilter']
    advantages: Union[_str, 'types.StringWithAggregatesFilter']
    disadvantages: Union[_str, 'types.StringWithAggregatesFilter']
    tags: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ResultScalarWhereWithAggregatesInputRecursive4']
    OR: List['ResultScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ResultScalarWhereWithAggregatesInputRecursive4']


class ResultScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Result arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    result: Union[_str, 'types.StringWithAggregatesFilter']
    points: Union[_int, 'types.IntWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    match_description: Union[_str, 'types.StringWithAggregatesFilter']
    advantages: Union[_str, 'types.StringWithAggregatesFilter']
    disadvantages: Union[_str, 'types.StringWithAggregatesFilter']
    tags: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class ResultGroupByOutput(TypedDict, total=False):
    id: _str
    userId: _str
    result: _str
    points: _int
    description: _str
    match_description: _str
    advantages: List[_str]
    disadvantages: List[_str]
    tags: List[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'ResultSumAggregateOutput'
    _avg: 'ResultAvgAggregateOutput'
    _min: 'ResultMinAggregateOutput'
    _max: 'ResultMaxAggregateOutput'
    _count: 'ResultCountAggregateOutput'


class ResultAvgAggregateOutput(TypedDict, total=False):
    """Result output for aggregating averages"""
    points: float


class ResultSumAggregateOutput(TypedDict, total=False):
    """Result output for aggregating sums"""
    points: _int


class ResultScalarAggregateOutput(TypedDict, total=False):
    """Result output including scalar fields"""
    id: _str
    userId: _str
    result: _str
    points: _int
    description: _str
    match_description: _str
    advantages: List[_str]
    disadvantages: List[_str]
    tags: List[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


ResultMinAggregateOutput = ResultScalarAggregateOutput
ResultMaxAggregateOutput = ResultScalarAggregateOutput


class ResultMaxAggregateInput(TypedDict, total=False):
    """Result input for aggregating by max"""
    id: bool
    userId: bool
    result: bool
    points: bool
    description: bool
    match_description: bool
    advantages: bool
    disadvantages: bool
    tags: bool
    createdAt: bool
    updatedAt: bool


class ResultMinAggregateInput(TypedDict, total=False):
    """Result input for aggregating by min"""
    id: bool
    userId: bool
    result: bool
    points: bool
    description: bool
    match_description: bool
    advantages: bool
    disadvantages: bool
    tags: bool
    createdAt: bool
    updatedAt: bool


class ResultNumberAggregateInput(TypedDict, total=False):
    """Result input for aggregating numbers"""
    points: bool


ResultAvgAggregateInput = ResultNumberAggregateInput
ResultSumAggregateInput = ResultNumberAggregateInput


ResultCountAggregateInput = TypedDict(
    'ResultCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'result': bool,
        'points': bool,
        'description': bool,
        'match_description': bool,
        'advantages': bool,
        'disadvantages': bool,
        'tags': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

ResultCountAggregateOutput = TypedDict(
    'ResultCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'result': int,
        'points': int,
        'description': int,
        'match_description': int,
        'advantages': int,
        'disadvantages': int,
        'tags': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


ResultKeys = Literal[
    'id',
    'userId',
    'profile',
    'result',
    'points',
    'description',
    'match_description',
    'advantages',
    'disadvantages',
    'tags',
    'createdAt',
    'updatedAt',
]
ResultScalarFieldKeys = Literal[
    'id',
    'userId',
    'result',
    'points',
    'description',
    'match_description',
    'advantages',
    'disadvantages',
    'tags',
    'createdAt',
    'updatedAt',
]
ResultScalarFieldKeysT = TypeVar('ResultScalarFieldKeysT', bound=ResultScalarFieldKeys)

ResultRelationalFieldKeys = Literal[
        'profile',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields